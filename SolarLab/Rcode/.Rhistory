mean(kk30[[1]]$mapq)
bf[1]
assays(tab[5])
assay(tab[5])
mm = ScanBamParam(which=rowRanges(tab)[5], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk = scanBam(bf[1], param=mm)
assay(tab[5])[1]
mean(kk[[1]]$mapq)
mm30 = ScanBamParam(which=rowRanges(tab)[30], what="mapq")
bf30 = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk30 = scanBam(bf30[1], param=mm30)
assay(tab[30])[1]
mean(kk30[[1]]$mapq)
kk30
kk
countBam(bf[1], param=mm)
countBam(bf[1], param=mm30)
library(geuvPack)
library(VariantAnnotation)
gtpath
biocLite("geuvPack")
library(geuvPack)
library(VariantAnnotation)
gtpath
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
```
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
library(ph525x)
b1 = benchOOM()
library(BiocInstaller)
biocLite("rhdf5")
library(ph525x)
b1 = benchOOM()
biocLite("bigmemory")
library(ph525x)
library(rhdf5)
library(bigmemory)
b1 = benchOOM()
b1
b1
b1$wr
b1$meth[which.min(b1$wr)]
h22 = scanVcfHeader(gtpath(22))
h22
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
mean( h5read("ex_hdf5file.h5", "x", index=list(1:4,1:4)))
h5read("ex_hdf5file.h5", "x", index=list(1:4,1:4))
h5read("ex_hdf5file.h5", "x")
h22 = scanVcfHeader(gtpath(22))
library(geuvPack)
library(VariantAnnotation)
gtpath
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
help.start()
library(ERBS)
juxta("chr22", main="ESRRA binding peaks on chr22")
juxta = function (chrname="chr22", ...)
{
require(ERBS)
data(HepG2)
data(GM12878)
require(ggbio)
require(GenomicRanges)  # "subset" is overused, need import detail
ap1 = autoplot(GenomicRanges::subset(HepG2, seqnames==chrname))
ap2 = autoplot(GenomicRanges::subset(GM12878, seqnames==chrname))
tracks(HepG2 = ap1, Bcell = ap2, ...)
# alternative code for Gviz below
#    require(Gviz)
#    ap1 = AnnotationTrack(GenomicRanges::subset(HepG2, seqnames==chrname))
#    names(ap1) = "HepG2"
#    ap2 = AnnotationTrack(GenomicRanges::subset(GM12878, seqnames==chrname))
#    names(ap2) = "B-cell"
#    ax = GenomeAxisTrack()
#    plotTracks(list(ax, ap1, ap2))
}
library(ERBS)
juxta("chr22", main="ESRRA binding peaks on chr22")
library(ERBS)
juxta("chr2", main="ESRRA binding peaks on chr2")
?package.skeleton
package.skeleton("erbsViz",list=juxta")
package.skeleton("erbsViz",list="juxta")
package.skeleton("erbsViz",list="juxta")
getwd()
package.skeleton("erbsViz",list="juxta")
install.packages("erbsViz", repos=NULL, type="source")
install.packages("erbsViz", repos=NULL, type="source")
library(erbsViz)
jdemo = juxta()
class(jdemo)
class(jdemo)
getSlots(getClass(class(jdemo)))
getSlots(getClass("Tracks"))
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0", "me <me@abc.com>",
"me <me@abc.com>", ".")
library(OrganismDbi)
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0", "me <me@abc.com>",
"me <me@abc.com>", ".")
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0", "me <me@abc.com>",
"me <me@abc.com>", ".")
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
gd
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
?makeOrganismPackage
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
library(org.Ce.eg.db)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
install.packages("Cen.ele6",
repos=NULL, type="source")
library(OrganismDbi)
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
join2 = c(org.Sc.sgd.db="ENTREZID",
TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
# gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
library(OrganismDbi)
gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
join2 = c(org.Sc.sgd.db="ENTREZID",
TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
if (!file.exists("Sac.cer3")) # don't do twice...
makeOrganismPackage(pkgname="Sac.cer3",  # simplify typing!
graphData=gd, organism="Saccharomyces cerevisiae",
version="1.0.0", maintainer="Student <ph525x@harvardx.edu>",
author="Student <ph525x@harvardx.edu>",
destDir=".",
license="Artistic-2.0")
gd
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
gd
library(OrganismDbi)
library(OrganismDbi)
gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
join2 = c(org.Sc.sgd.db="ENTREZID",
TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
if (!file.exists("Sac.cer3")) # don't do twice...
makeOrganismPackage(pkgname="Sac.cer3",  # simplify typing!
graphData=gd, organism="Saccharomyces cerevisiae",
version="1.0.0", maintainer="Student <ph525x@harvardx.edu>",
author="Student <ph525x@harvardx.edu>",
destDir=".",
license="Artistic-2.0")
library(org.Sc.sgd.db)
biocLite(org.Sc.sgd.db)
source("http://www.bioconductor.org/biocLite.R")
biocLite()
library(BiocInstaller)
biocLite("org.Ce.eg.db")
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
library(BiocInstaller)
biocLite("TxDb.Celegans.UCSC.ce6.ensGene")
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
install.packages("Cen.ele6",
repos=NULL, type="source")
library(Cen.ele6)
sum(seqlengths(Cen.ele6))
R CMD check erbsViz
?grid
seq(0,50,5)
setwd("C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode")
# EnergySim
windMW<-15
windPower<-read.table("../data/specs/windPowerCurve.csv",header=FALSE,sep=",")
solarMWp<-10
# read in demand files
houses=18000
ddata<-read.csv("../data/profiles/EESP/domDem10.csv")
demand<-numeric()
demand<-houses*ddata$W/1e6
rm(ddata)
sipfilepathstem<-"../data/synthetic/CamBSRN_Solar10minSyn/CamSolarSyn10min"
wipfilepathstem<-"../data/synthetic/CallywithWind10minSyn/Cally"
sipfilepathtail<-".csv"
wipfilepathtail<-"_10min.csv"
# set up input file numbers
ipfilename<-function(file,ipfilepathstem,ipfilepathtail){
ipfilehandle<-as.character(file)
if (file < 10){
ipfilehandle<-paste0("00",ipfilehandle)
}
if (file >= 10 && file < 100){
ipfilehandle<-paste0("0",ipfilehandle)
}
ipfilename<-paste0(ipfilepathstem,ipfilehandle,ipfilepathtail)
}
wp<-function(x){
windPower[which(windPower[,1]==x),2]
}
## loop through solar and wind files
numTrials<-1
trial=0
stored=0
#start<-proc.time()
res<-replicate(numTrials,{
trial<<-trial+1
wfile<-floor(100*runif(1)+1)
sfile<-floor(100*runif(1)+1)
print(paste("Trial: ",trial," Solar file:",sfile,", Wind file: ",wfile,sep=" "))
wfilename<-ipfilename(wfile,wipfilepathstem,wipfilepathtail)
sfilename<-ipfilename(sfile,sipfilepathstem,sipfilepathtail)
wdata<-read.csv(wfilename)[,2]
sdata<-read.csv(sfilename)[,2]
# data$day<-min(365,data$t %/% 144 +1)
solarop<-numeric(length=length(sdata))
windop<-numeric(lenhgth=length(wdata))
# windop<-unlist(sapply(wdata,function(x){
#   windMW*windPower[which(windPower[,1]==x),2]
# }))
for (WindMW in seq(0,50,5)){
for (SolarMWp in seq(0,50,5)){
windop<-WindMW*unlist(sapply(wdata,wp))
solarop<-solarMWp*sdata/1000
totalop<-windop+solarop
balance<-totalop-demand
ebalance<-cumsum(balance)/6000 # in GWh
#powerop<-data.frame(windop,solarop,totalop,demand,balance,ebalance)
# summary(powerop)
#diff<-proc.time()-start
#print(diff)
c(WindMW,SolarMWp,max(balance),min(balance),max(ebalance),min(ebalance))
}
}
})
res<-t(res)
res
library(rafalib)
mypar(4,1)
hist(res[,3],breaks=50,main="max pbalance")
hist(res[,4],breaks=50,main="min pbalance")
hist(res[,5],breaks=50,main="max ebalance")
hist(res[,6],breaks=50,main="min ebalance")
# EnergySim
windMW<-15
windPower<-read.table("../data/specs/windPowerCurve.csv",header=FALSE,sep=",")
solarMWp<-10
# read in demand files
houses=18000
ddata<-read.csv("../data/profiles/EESP/domDem10.csv")
demand<-numeric()
demand<-houses*ddata$W/1e6
rm(ddata)
sipfilepathstem<-"../data/synthetic/CamBSRN_Solar10minSyn/CamSolarSyn10min"
wipfilepathstem<-"../data/synthetic/CallywithWind10minSyn/Cally"
sipfilepathtail<-".csv"
wipfilepathtail<-"_10min.csv"
# set up input file numbers
ipfilename<-function(file,ipfilepathstem,ipfilepathtail){
ipfilehandle<-as.character(file)
if (file < 10){
ipfilehandle<-paste0("00",ipfilehandle)
}
if (file >= 10 && file < 100){
ipfilehandle<-paste0("0",ipfilehandle)
}
ipfilename<-paste0(ipfilepathstem,ipfilehandle,ipfilepathtail)
}
wp<-function(x){
windPower[which(windPower[,1]==x),2]
}
## loop through solar and wind files
numTrials<-1
trial=0
stored=0
#start<-proc.time()
res<-replicate(numTrials,{
trial<<-trial+1
wfile<-floor(100*runif(1)+1)
sfile<-floor(100*runif(1)+1)
print(paste("Trial: ",trial," Solar file:",sfile,", Wind file: ",wfile,sep=" "))
wfilename<-ipfilename(wfile,wipfilepathstem,wipfilepathtail)
sfilename<-ipfilename(sfile,sipfilepathstem,sipfilepathtail)
wdata<-read.csv(wfilename)[,2]
sdata<-read.csv(sfilename)[,2]
# data$day<-min(365,data$t %/% 144 +1)
solarop<-numeric(length=length(sdata))
windop<-numeric(length=length(wdata))
# windop<-unlist(sapply(wdata,function(x){
#   windMW*windPower[which(windPower[,1]==x),2]
# }))
for (WindMW in seq(0,50,5)){
for (SolarMWp in seq(0,50,5)){
windop<-WindMW*unlist(sapply(wdata,wp))
solarop<-solarMWp*sdata/1000
totalop<-windop+solarop
balance<-totalop-demand
ebalance<-cumsum(balance)/6000 # in GWh
#powerop<-data.frame(windop,solarop,totalop,demand,balance,ebalance)
# summary(powerop)
#diff<-proc.time()-start
#print(diff)
c(WindMW,SolarMWp,max(balance),min(balance),max(ebalance),min(ebalance))
}
}
})
res<-t(res)
res
library(rafalib)
mypar(4,1)
hist(res[,3],breaks=50,main="max pbalance")
hist(res[,4],breaks=50,main="min pbalance")
hist(res[,5],breaks=50,main="max ebalance")
hist(res[,6],breaks=50,main="min ebalance")
summary(res)
res
# EnergySim
windMW<-15
windPower<-read.table("../data/specs/windPowerCurve.csv",header=FALSE,sep=",")
solarMWp<-10
# read in demand files
houses=18000
ddata<-read.csv("../data/profiles/EESP/domDem10.csv")
demand<-numeric()
demand<-houses*ddata$W/1e6
rm(ddata)
sipfilepathstem<-"../data/synthetic/CamBSRN_Solar10minSyn/CamSolarSyn10min"
wipfilepathstem<-"../data/synthetic/CallywithWind10minSyn/Cally"
sipfilepathtail<-".csv"
wipfilepathtail<-"_10min.csv"
# set up input file numbers
ipfilename<-function(file,ipfilepathstem,ipfilepathtail){
ipfilehandle<-as.character(file)
if (file < 10){
ipfilehandle<-paste0("00",ipfilehandle)
}
if (file >= 10 && file < 100){
ipfilehandle<-paste0("0",ipfilehandle)
}
ipfilename<-paste0(ipfilepathstem,ipfilehandle,ipfilepathtail)
}
wp<-function(x){
windPower[which(windPower[,1]==x),2]
}
## loop through solar and wind files
numTrials<-1
trial=0
stored=0
#start<-proc.time()
res<-replicate(numTrials,{
trial<<-trial+1
wfile<-floor(100*runif(1)+1)
sfile<-floor(100*runif(1)+1)
print(paste("Trial: ",trial," Solar file:",sfile,", Wind file: ",wfile,sep=" "))
wfilename<-ipfilename(wfile,wipfilepathstem,wipfilepathtail)
sfilename<-ipfilename(sfile,sipfilepathstem,sipfilepathtail)
wdata<-read.csv(wfilename)[,2]
sdata<-read.csv(sfilename)[,2]
# data$day<-min(365,data$t %/% 144 +1)
solarop<-numeric(length=length(sdata))
windop<-numeric(length=length(wdata))
# windop<-unlist(sapply(wdata,function(x){
#   windMW*windPower[which(windPower[,1]==x),2]
# }))
for (WindMW in seq(0,50,5)){
for (SolarMWp in seq(0,50,5)){
print(paste("Solar: ",SolarMWp,", Wind: ",WindMW))
windop<-WindMW*unlist(sapply(wdata,wp))
solarop<-solarMWp*sdata/1000
totalop<-windop+solarop
balance<-totalop-demand
ebalance<-cumsum(balance)/6000 # in GWh
#powerop<-data.frame(windop,solarop,totalop,demand,balance,ebalance)
# summary(powerop)
#diff<-proc.time()-start
#print(diff)
c(WindMW,SolarMWp,max(balance),min(balance),max(ebalance),min(ebalance))
}
}
})
# EnergySim
windMW<-15
windPower<-read.table("../data/specs/windPowerCurve.csv",header=FALSE,sep=",")
solarMWp<-10
# read in demand files
houses=18000
ddata<-read.csv("../data/profiles/EESP/domDem10.csv")
demand<-numeric()
demand<-houses*ddata$W/1e6
rm(ddata)
sipfilepathstem<-"../data/synthetic/CamBSRN_Solar10minSyn/CamSolarSyn10min"
wipfilepathstem<-"../data/synthetic/CallywithWind10minSyn/Cally"
sipfilepathtail<-".csv"
wipfilepathtail<-"_10min.csv"
# set up input file numbers
ipfilename<-function(file,ipfilepathstem,ipfilepathtail){
ipfilehandle<-as.character(file)
if (file < 10){
ipfilehandle<-paste0("00",ipfilehandle)
}
if (file >= 10 && file < 100){
ipfilehandle<-paste0("0",ipfilehandle)
}
ipfilename<-paste0(ipfilepathstem,ipfilehandle,ipfilepathtail)
}
wp<-function(x){
windPower[which(windPower[,1]==x),2]
}
## loop through solar and wind files
numTrials<-1
trial=0
stored=0
res<-data.frame()
#start<-proc.time()
for (trials in 1:numTrials){
trial<<-trial+1
wfile<-floor(100*runif(1)+1)
sfile<-floor(100*runif(1)+1)
print(paste("Trial: ",trial," Solar file:",sfile,", Wind file: ",wfile,sep=" "))
wfilename<-ipfilename(wfile,wipfilepathstem,wipfilepathtail)
sfilename<-ipfilename(sfile,sipfilepathstem,sipfilepathtail)
wdata<-read.csv(wfilename)[,2]
sdata<-read.csv(sfilename)[,2]
# data$day<-min(365,data$t %/% 144 +1)
solarop<-numeric(length=length(sdata))
windop<-numeric(length=length(wdata))
# windop<-unlist(sapply(wdata,function(x){
#   windMW*windPower[which(windPower[,1]==x),2]
# }))
for (WindMW in seq(0,50,5)){
for (SolarMWp in seq(0,50,5)){
print(paste("Solar: ",SolarMWp,", Wind: ",WindMW))
windop<-WindMW*unlist(sapply(wdata,wp))
solarop<-solarMWp*sdata/1000
totalop<-windop+solarop
balance<-totalop-demand
ebalance<-cumsum(balance)/6000 # in GWh
#powerop<-data.frame(windop,solarop,totalop,demand,balance,ebalance)
# summary(powerop)
#diff<-proc.time()-start
#print(diff)
res<-rbind(res,t(c(WindMW,SolarMWp,max(balance),min(balance),max(ebalance),min(ebalance))))
}
}
}
res<-t(res)
res
res<-t(res)
res
library(rafalib)
mypar(4,1)
hist(res[,3],breaks=50,main="max pbalance")
hist(res[,4],breaks=50,main="min pbalance")
hist(res[,5],breaks=50,main="max ebalance")
hist(res[,6],breaks=50,main="min ebalance")
library(ggplot2)
pres<-ggplot(data=res,aes(x=V1,y=V2,colour=V6))+geom_point()
class(res)
res<-as.data.frame(res)
str9res
str(res)
pres<-ggplot(data=res,aes(x=V1,y=V2,colour=V6))+geom_point()
pres
summary(res)
res[which.min(abs(res[,6])),]
res[which.min(abs(res[,6]-res[,5])),]
