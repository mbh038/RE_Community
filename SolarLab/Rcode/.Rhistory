#
#     }
}
tpm[1,]
summary(tpm)
#print(tpm)
sum(tpm[1,])
# sums of each row of TPM
for (i in 1 :nrow(tpm)){
spm[i]=sum(tpm[i,])
}
spm
sum(spm)
tpmr<-tpm
count=0
bins<-seq(1,maxBin)
for (i in 1 :nrow(tpm)){
if (sum(tpm[i,])==0) {
bins<-bins[-(i-count)]
tpmr<-tpmr[-(i-count),]
tpmr<-tpmr[,-(i-count)]
count=count+1
}
}
str(tpmr)
bins
spm<-numeric(nrow(tpmr))
# sums of each row of TPMr
for (i in 1 :nrow(tpmr)){
spm[i]=sum(tpmr[i,])
}
spm
sum(spm)
tpmp<-tpmr
# TPM as probabilities
for (i in 1 :nrow(tpmr)){
tpmp[i,]=tpmr[i,]/spm[i]
}
sum(tpmp)
cpm<-tpmp
# TPM-> CPM: cumulative probabilities
for (i in 1 : nrow(tpmp)){
for (j in 1 :ncol(tpmp)){
cpm[i,j]=sum(tpmp[i,1:j])
}
}
cbind(bins,cpm)
write.table(cpm,"../tpm/Cam2001cpm.csv",sep=",",row.names=FALSE,col.names=FALSE)
# Solar Functions
################################################################################
# declination angle
deltaOdot<-function(t){
# t is the time in day number 1-365
#t<-t*365
asin(sin(-0.4091)*cos((2*pi/365.24)*(t+10)+0.0334*sin((2*pi/365.24)*(t-2))))
}
#sunrise and sunset hour angle
h0<-function(phi,t){
#t is day number
acos(tan(phi)*tan(deltaOdot(t)))
}
#cosine of zenith angle
cosTheta<-function(phi,delta,h){
# theta is the zenith angle
sin(phi)*sin(delta)+cos(phi)*cos(delta)*cos(h)
}
# solar flux
solarFlux<-function(S0,phi,t){
# S0 is solar constant
# phi is latitude in radians
# t is day of year
# hour angle -pi to pi
h<-pi*(2*(t-floor(t))-1)
# declination angle
delta<-deltaOdot(t)
flux<-S0*cosTheta(phi,delta,h)
# make it zero at nighttime (when cos theta is negative)
flux<-pmax(flux,rep(0,length(t)))
flux
}
#####################################################################
# Load data
#####################################################################
# cleaned data
Cam2001n<-readRDS("../data/cleaned/Cam2001n.csv")
# cpm matrix for given location
cpm<-read.csv("../tpm/Cam2001cpm.csv")
# first column is the bins,so separate that off
bins<-cpm[,1]
cpm[,1]<-NULL
bins
cpm<-read.csv("../tpm/Cam2001cpm.csv")
cpm
cpm<-read.table("../tpm/Cam2001cpm.csv",sep=",")
head(cpm)
#generates a tpm and cpm matric from actual solar data.
# Solar Functions
################################################################################
# declination angle
deltaOdot<-function(t){
# t is the time in day number 1-365
#t<-t*365
asin(sin(-0.4091)*cos((2*pi/365.24)*(t+10)+0.0334*sin((2*pi/365.24)*(t-2))))
}
#sunrise and sunset hour angle
h0<-function(phi,t){
#t is day number
acos(tan(phi)*tan(deltaOdot(t)))
}
#cosine of zenith angle
cosTheta<-function(phi,delta,h){
# theta is the zenith angle
sin(phi)*sin(delta)+cos(phi)*cos(delta)*cos(h)
}
# solar flux
solarFlux<-function(S0,phi,t){
# S0 is solar constant
# phi is latitude in radians
# t is day of year
# hour angle -pi to pi
h<-pi*(2*(t-floor(t))-1)
# declination angle
delta<-deltaOdot(t)
flux<-S0*cosTheta(phi,delta,h)
# make it zero at nighttime (when cos theta is negative)
flux<-pmax(flux,rep(0,length(t)))
flux
}
# Load data
########################################################################
Cam2001n<-readRDS("../data/cleaned/Cam2001n.csv")
# Markov Chain
########################################################################
reference<-data.frame(Cam2001n$datetime,Cam2001n$SWD)
names(reference)<-c("datetime","SWD")
# log transform the data
reference$SWD<-log(reference$SWD)
reference$SWD[reference$SWD=="-Inf"]=0
SWDrange<-range(reference$SWD)
# bin into 100 levels
reference$bin<-floor((reference$SWD/max(reference$SWD))*99.9)+1
table(reference$bin)
sum(table(reference$bin))
hist(reference$bin)
maxBin=max(reference$bin)
tpm<-matrix(0, nrow = maxBin, ncol =maxBin)
spm<-numeric(maxBin)
cpm<-matrix(0, nrow = maxBin, ncol =maxBin)
# loop to generate TPM counts
for (i in 1:(nrow(reference)-1)){
tpm[reference$bin[i],reference$bin[i+1]] <-tpm[reference$bin[i],reference$bin[i+1]] + 1
#     if (is.na(tpm[reference$bin[i],reference$bin[i+1]])==TRUE){
#         print (i)
#         print (reference$bin[i])
#         print (reference$bin[i+1])
#
#     }
}
tpm[1,]
summary(tpm)
#print(tpm)
sum(tpm[1,])
# sums of each row of TPM
for (i in 1 :nrow(tpm)){
spm[i]=sum(tpm[i,])
}
spm
sum(spm)
tpmr<-tpm
count=0
bins<-seq(1,maxBin)
for (i in 1 :nrow(tpm)){
if (sum(tpm[i,])==0) {
bins<-bins[-(i-count)]
tpmr<-tpmr[-(i-count),]
tpmr<-tpmr[,-(i-count)]
count=count+1
}
}
str(tpmr)
bins
spm<-numeric(nrow(tpmr))
# sums of each row of TPMr
for (i in 1 :nrow(tpmr)){
spm[i]=sum(tpmr[i,])
}
spm
sum(spm)
tpmp<-tpmr
# TPM as probabilities
for (i in 1 :nrow(tpmr)){
tpmp[i,]=tpmr[i,]/spm[i]
}
sum(tpmp)
cpm<-tpmp
# TPM-> CPM: cumulative probabilities
for (i in 1 : nrow(tpmp)){
for (j in 1 :ncol(tpmp)){
cpm[i,j]=sum(tpmp[i,1:j])
}
}
cpm<-cbind(bins,cpm)
write.table(cpm,"../tpm/Cam2001cpm.csv",sep=",",row.names=FALSE,col.names=FALSE)
cpm[,1]
Cam2001n<-readRDS("../data/cleaned/Cam2001n.csv")
# cpm matrix for given location
cpm<-read.table("../tpm/Cam2001cpm.csv",sep=",")
# first column is the bins,so separate that off
bins<-cpm[,1]
cpm[,1]<-NULL
bins
rm(list=ls())
# Solar Functions
################################################################################
# declination angle
deltaOdot<-function(t){
# t is the time in day number 1-365
#t<-t*365
asin(sin(-0.4091)*cos((2*pi/365.24)*(t+10)+0.0334*sin((2*pi/365.24)*(t-2))))
}
#sunrise and sunset hour angle
h0<-function(phi,t){
#t is day number
acos(tan(phi)*tan(deltaOdot(t)))
}
#cosine of zenith angle
cosTheta<-function(phi,delta,h){
# theta is the zenith angle
sin(phi)*sin(delta)+cos(phi)*cos(delta)*cos(h)
}
# solar flux
solarFlux<-function(S0,phi,t){
# S0 is solar constant
# phi is latitude in radians
# t is day of year
# hour angle -pi to pi
h<-pi*(2*(t-floor(t))-1)
# declination angle
delta<-deltaOdot(t)
flux<-S0*cosTheta(phi,delta,h)
# make it zero at nighttime (when cos theta is negative)
flux<-pmax(flux,rep(0,length(t)))
flux
}
# cleaned data
Cam2001n<-readRDS("../data/cleaned/Cam2001n.csv")
# cpm matrix for given location
cpm<-read.table("../tpm/Cam2001cpm.csv",sep=",")
# first column is the bins,so separate that off
bins<-cpm[,1]
cpm[,1]<-NULL
bins
phi=(pi/180)*50
S0=1050
reference<-data.frame(Cam2001n$datetime,Cam2001n$SWD)
names(reference)<-c("datetime","SWD")
#Stochastic generation of synthetic data
v=rep(0,(nrow(reference)))
#randomly choose first solar value
v[1]<-solarFlux(S0,phi,720/1440)
swd<-v
for (i in 720:(365*1440)){
colIndex=runif(1)
j=1
#print (i-1)+1
while (cpm[max(1,round(v[i-1],0)),j] < colIndex){
j=j+1
}
#print (j)
v[i]=bins[j]
Q<-solarFlux(S0,phi,i/1440)
swd[i]<-min(Q,exp((v[i]/100)*7.18))
#swd[i]<-Q*v[i]/100
}
for (i in 720:(365*1440)){
colIndex=runif(1)
j=1
#print (i-1)+1
while (cpm[max(1,round(v[i-1],0)),j] < colIndex){
j=j+1
}
print (j)
v[i]=bins[j]
Q<-solarFlux(S0,phi,i/1440)
swd[i]<-min(Q,exp((v[i]/100)*7.18))
#swd[i]<-Q*v[i]/100
}
summary(v)
summary(swd)
hist(swd)
summary(reference$bin)
t=seq(1,366,length.out=365*1440)
Q<-solarFlux(S0,phi,t)
day<-180
dayspan<-7
daybegin<-day*1440
dayend<-(day+dayspan)*1440
plot(t[daybegin:dayend],Cam2001$SWD[daybegin:dayend],type="l",ylim=c(0,100))
lines(t[daybegin:dayend],swd[daybegin:dayend],type="l",col="blue")
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="red")
plot(t[daybegin:dayend],Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,100))
lines(t[daybegin:dayend],swd[daybegin:dayend],type="l",col="blue")
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="red")
plot(t[daybegin:dayend],Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,1500))
lines(t[daybegin:dayend],swd[daybegin:dayend],type="l",col="blue")
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="red")
hist(v)
summary(v)
exp(7.18)
v[1]
day<-1
dayspan<-7
daybegin<-day*1440
dayend<-(day+dayspan)*1440
plot(t[daybegin:dayend],Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,1500))
lines(t[daybegin:dayend],swd[daybegin:dayend],type="l",col="blue")
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="red")
day<-1
dayspan<-7
daybegin<-day*1440
dayend<-(day+dayspan)*1440
plot(t[daybegin:dayend],Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,500))
lines(t[daybegin:dayend],swd[daybegin:dayend],type="l",col="blue")
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="red")
day<-1
dayspan<-3
daybegin<-day*1440
dayend<-(day+dayspan)*1440
plot(t[daybegin:dayend],Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,500))
lines(t[daybegin:dayend],swd[daybegin:dayend],type="l",col="blue")
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="red")
reference<-data.frame(Cam2001n$datetime,Cam2001n$SWD)
names(reference)<-c("datetime","SWD")
#Stochastic generation of synthetic data
v=rep(0,(nrow(reference)))
#randomly choose first solar value
v[1]<-solarFlux(S0,phi,720/1440)
swd<-v
for (i in 720:(365*1440)){
colIndex=runif(1)
j=1
#print (i-1)+1
while (cpm[max(1,round(v[i-1],0)),min(j,ncol(cpm))] < colIndex){
j=j+1
}
print (j)
v[i]=bins[j]
Q<-solarFlux(S0,phi,i/1440)
swd[i]<-min(Q,exp((v[i]/100)*7.18))
#swd[i]<-Q*v[i]/100
}
reference<-data.frame(Cam2001n$datetime,Cam2001n$SWD)
names(reference)<-c("datetime","SWD")
#Stochastic generation of synthetic data
v=rep(0,(nrow(reference)))
#randomly choose first solar value
v[1]<-solarFlux(S0,phi,720/1440)
swd<-v
for (i in 720:(365*1440)){
colIndex=runif(1)
j=1
#print (i-1)+1
while (cpm[min(max(1,round(v[i-1],0)),nrow(cpm)),min(j,ncol(cpm))] < colIndex){
j=j+1
}
print (j)
v[i]=bins[j]
Q<-solarFlux(S0,phi,i/1440)
swd[i]<-min(Q,exp((v[i]/100)*7.18))
#swd[i]<-Q*v[i]/100
}
#Stochastic generation of synthetic data
v=rep(0,(nrow(reference)))
#randomly choose first solar value
v[1]<-solarFlux(S0,phi,720/1440)
swd<-v
for (i in 720:(365*1440)){
colIndex=runif(1)
j=1
#print (i-1)+1
while (cpm[min(max(1,round(v[i-1],0)),nrow(cpm)),min(j,ncol(cpm))] < colIndex){
j=j+1
}
#print (j)
v[i]=bins[j]
Q<-solarFlux(S0,phi,i/1440)
swd[i]<-min(Q,exp((v[i]/100)*7.18))
#swd[i]<-Q*v[i]/100
}
#Stochastic generation of synthetic data
v=rep(0,(nrow(reference)))
#randomly choose first solar value
v[1]<-solarFlux(S0,phi,720/1440)
swd<-v
for (i in 720:(10*1440)){
colIndex=runif(1)
j=1
#print (i-1)+1
while (cpm[min(max(1,round(v[i-1],0)),nrow(cpm)),min(j,ncol(cpm))] < colIndex){
j=j+1
}
#print (j)
v[i]=bins[j]
Q<-solarFlux(S0,phi,i/1440)
swd[i]<-min(Q,exp((v[i]/100)*7.18))
#swd[i]<-Q*v[i]/100
}
summary(v)
summary(swd)
hist(swd)
summary(reference$bin)
t=seq(1,366,length.out=365*1440)
Q<-solarFlux(S0,phi,t)
day<-2
dayspan<-3
daybegin<-day*1440
dayend<-(day+dayspan)*1440
plot(t[daybegin:dayend],Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,500))
lines(t[daybegin:dayend],swd[daybegin:dayend],type="l",col="blue")
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="red")
day<-1
dayspan<-10
daybegin<-day*1440
dayend<-(day+dayspan)*1440
plot(t[daybegin:dayend],Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,500))
lines(t[daybegin:dayend],swd[daybegin:dayend],type="l",col="blue")
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="red")
hist(v)
hist(v,breaks=50)
v[1:1000]
reference<-data.frame(Cam2001n$datetime,Cam2001n$SWD)
names(reference)<-c("datetime","SWD")
#Stochastic generation of synthetic data
v=rep(0,(nrow(reference)))
#randomly choose first solar value
v[1]<-0.5*solarFlux(S0,phi,720/1440)
swd<-v
for (i in 720:(10*1440)){
colIndex=runif(1)
j=1
#print (i-1)+1
while (cpm[min(max(1,round(v[i-1],0)),nrow(cpm)),min(j,ncol(cpm))] < colIndex){
j=j+1
}
#print (j)
v[i]=bins[j]
Q<-solarFlux(S0,phi,i/1440)
swd[i]<-min(Q,exp((v[i]/100)*7.18))
#swd[i]<-Q*v[i]/100
}
summary(v)
summary(swd)
hist(swd)
summary(reference$bin)
t=seq(1,366,length.out=365*1440)
Q<-solarFlux(S0,phi,t)
day<-1
dayspan<-10
daybegin<-day*1440
dayend<-(day+dayspan)*1440
plot(t[daybegin:dayend],Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,500))
lines(t[daybegin:dayend],swd[daybegin:dayend],type="l",col="blue")
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="red")
day<-1
dayspan<-2
daybegin<-day*1440
dayend<-(day+dayspan)*1440
plot(t[daybegin:dayend],Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,500))
lines(t[daybegin:dayend],swd[daybegin:dayend],type="l",col="blue")
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="red")
summary(v)
summary(swd)
hist(swd)
summary(reference$bin)
t=seq(1,366,length.out=365*1440)
Q<-solarFlux(S0,phi,t)
day<-1
dayspan<-1
daybegin<-day*1440
dayend<-(day+dayspan)*1440
plot(t[daybegin:dayend],Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,500))
lines(t[daybegin:dayend],swd[daybegin:dayend],type="l",col="blue")
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="red")
reference<-data.frame(Cam2001n$datetime,Cam2001n$SWD)
names(reference)<-c("datetime","SWD")
#Stochastic generation of synthetic data
v=rep(0,(nrow(reference)))
#randomly choose first solar value
v[1]<-0.5*solarFlux(S0,phi,2/1440)
swd<-v
for (i in 2:(1*1440)){
colIndex=runif(1)
j=1
#print (i-1)+1
while (cpm[min(max(1,round(v[i-1],0)),nrow(cpm)),min(j,ncol(cpm))] < colIndex){
j=j+1
}
#print (j)
v[i]=bins[j]
Q<-solarFlux(S0,phi,i/1440)
swd[i]<-min(Q,exp((v[i]/100)*7.18))
#swd[i]<-Q*v[i]/100
}
t=seq(1,366,length.out=365*1440)
Q<-solarFlux(S0,phi,t)
day<-1
dayspan<-1
daybegin<-day*1440
dayend<-(day+dayspan)*1440
plot(t[daybegin:dayend],Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,500))
lines(t[daybegin:dayend],swd[daybegin:dayend],type="l",col="blue")
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="red")
