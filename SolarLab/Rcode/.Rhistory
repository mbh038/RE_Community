if(axes > 2){
axis(1, at=xAt, labels=xLab, cex.axis=cex.axis)
buildAxis(2, c(y,0), n=3, nMax=3, cex.axis=cex.axis)
} else if(axes > 1){
buildAxis(2, c(y,0), n=3, nMax=3, cex.axis=cex.axis)
} else if(axes > 0){
axis(1, at=xAt, labels=xLab, cex.axis=cex.axis)
}
abline(h=0)
}
BuildNull <- function(xlim = c(-10, 10)) {
wTail(5, 2, L = -1000, U = 1000,
df = 50, lwd = 2.5, axes = FALSE,
curveColor = COL[1],
xlim = xlim)
axis(1, at = seq(-15, 15, 3))
mtext(expression(bar(x)[trmt] - bar(x)[ctrl]),
side = 1, line = 1.8)
text(1.2, 0.2, "Null distribution", col = COL[1], pos = 4)
lines(rep(0, 2), c(0, dnorm(0, 0, 1.70)),
col = COL[1,4], lwd = 0.5)
}
BuildNull()
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
?axis
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
?mtext
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
?gamma
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
BuildNull(5)
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
?
normTail
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
side = 2, line = 1.8)
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
xlim = xlim)
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
library(openintro)
data(COL)
wTail<-function(scale=5, shape=2, L=NULL, U=NULL, M=NULL,curveColor=1, border=1, col='#569BBD', xlim=NULL, ylim=NULL, xlab='', ylab='', digits=2, axes=1, detail=999, xLab=c('number', 'symbol'), cex.axis=1, xAxisIncr=1, ...){
if(is.null(xlim)[1]){
xlim <- c(0,18)
}
temp <- diff(range(xlim))
x    <- seq(0, xlim[2], length.out=detail)
y    <- dweibull(x,shape,scale)
if(is.null(ylim)[1]){
ylim <- range(c(0,y))
}
plot(x, y, type='l', xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, axes=FALSE, col=curveColor, ...)
if(!is.null(L[1])){
these <- (x <= L)
X <- c(x[these][1], x[these], rev(x[these])[1])
Y <- c(0, y[these], 0)
polygon(X, Y, border=border, col=col)
}
if(!is.null(U[1])){
these <- (x >= U)
X <- c(x[these][1], x[these], rev(x[these])[1])
Y <- c(0, y[these], 0)
polygon(X, Y, border=border, col=col)
}
if(all(!is.null(M[1:2]))){
these <- (x >= M[1] & x <= M[2])
X <- c(x[these][1], x[these], rev(x[these])[1])
Y <- c(0, y[these], 0)
polygon(X, Y, border=border, col=col)
}
if(axes == 1 || axes > 2){
if(xLab[1]=='symbol'){
xAt  <- m + (-3:3)*s
xLab <- expression(mu-3*sigma, mu-2*sigma,
mu-sigma, mu,	mu+sigma,
mu+2*sigma, mu+3*sigma)
} else if(xLab[1] != 'number'){
stop('Argument "xLab" not recognized.\n')
} else {
temp <- seq(xAxisIncr, max(abs(xlim-m))/s, xAxisIncr)*s
xAt <- m + c(-temp, 0, temp)
xLab <- round(xAt, digits=digits)
}
}
if(axes > 2){
axis(1, at=xAt, labels=xLab, cex.axis=cex.axis)
buildAxis(2, c(y,0), n=3, nMax=3, cex.axis=cex.axis)
} else if(axes > 1){
buildAxis(2, c(y,0), n=3, nMax=3, cex.axis=cex.axis)
} else if(axes > 0){
axis(1, at=xAt, labels=xLab, cex.axis=cex.axis)
}
abline(h=0)
}
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
source('H:/Rspace/CC-Statistics/Distributions/Weibull/WindSpeedDistributions.R')
setwd("H:/Rspace/CC-Statistics/Distributions/Weibull")
source('H:/Rspace/RE_Community/SolarLab/Rcode/bisection.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/bisection.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
setwd("H:/Rspace/RE_Community/SolarLab/Rcode")
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
setwd("H:/Rspace/RE_Community/SolarLab/Rcode")
source('H:/Rspace/RE_Community/SolarLab/Rcode/min1_to_min10.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/min1_to_min10.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/min1_to_min10.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/min1_to_min10.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarTPM.R')
## Generates tpm and cpm matrices from actual solar data.
# Writes out to file 3 cpms: a total, am and pm version.
maxSWD<-0
maxBin<-0
nbin<-100
min10<-TRUE
file_handles<-c("Cam2001n","Cam2002n","Cam2003n","Cam2004n","Cam2005n","Cam2006n","Cam2007n","Cam2008n","Cam2014n","Cam2015n")
if (!min10) {
path<-"../data/cleaned/solar/CamBSRN_Solar1min/"
} else {
# for all cleaned data sets
file_handles<-cat(file_handles,"10min",sep="")
path<-"../data/cleaned/solar/CamBSRN_Solar10min/"
}
file_handles<-cat(file_handles,".rds",sep="")
file_handles
maxSWD<-0
maxBin<-0
nbin<-100
min10<-TRUE
file_handles<-c("Cam2001n","Cam2002n","Cam2003n","Cam2004n","Cam2005n","Cam2006n","Cam2007n","Cam2008n","Cam2014n","Cam2015n")
if (!min10) {
path<-"../data/cleaned/solar/CamBSRN_Solar1min/"
} else {
# for all cleaned data sets
file_handles<-paste0(file_handles,"10min",sep="")
path<-"../data/cleaned/solar/CamBSRN_Solar10min/"
}
file_handles<-paste0(file_handles,".rds",sep="")
file_handles
maxSWD<-0
maxBin<-0
nbin<-100
min10<-FALSE
file_handles<-c("Cam2001n","Cam2002n","Cam2003n","Cam2004n","Cam2005n","Cam2006n","Cam2007n","Cam2008n","Cam2014n","Cam2015n")
if (!min10) {
path<-"../data/cleaned/solar/CamBSRN_Solar1min/"
} else {
# for all cleaned data sets
file_handles<-paste0(file_handles,"10min",sep="")
path<-"../data/cleaned/solar/CamBSRN_Solar10min/"
}
file_handles<-paste0(file_handles,".rds",sep="")
file_handles
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarTPM.R')
source("SolarFunctions.R")
#####################################################################
# Load data
#####################################################################
min10=TRUE
# cleaned data
#data<-readRDS("../data/cleaned/Cam2001n.csv")
data<-readRDS("../data/cleaned/solar/CamBSRN_Solar1min/Cam2014n.rds")
# sunrise and sunset times
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
# cpm matrix for given location
if (!min10){
cpm<-read.table("../tpm/solar/Cam_cpm.csv",sep=",")
cpm_am<-read.table("../tpm/solar/Cam_cpm_am.csv",sep=",")
cpm_pm<-read.table("../tpm/solar/Cam_cpm_pm.csv",sep=",")
} else {
cpm<-read.table("../tpm/solar/Cam_cpm10min.csv",sep=",")
cpm_am<-read.table("../tpm/solar/Cam_cpm_am10min.csv",sep=",")
cpm_pm<-read.table("../tpm/solar/Cam_cpm_pm10min.csv",sep=",")
}
source("SolarFunctions.R")
#####################################################################
# Load data
#####################################################################
min10=TRUE
# cleaned data
#data<-readRDS("../data/cleaned/Cam2001n.csv")
data<-readRDS("../data/cleaned/solar/CamBSRN_Solar1min/Cam2014n.rds")
# sunrise and sunset times
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
# cpm matrix for given location
if (!min10){
cpm<-read.table("../tpm/solar/Cam_cpm.csv",sep=",")
cpm_am<-read.table("../tpm/solar/Cam_cpm_am.csv",sep=",")
cpm_pm<-read.table("../tpm/solar/Cam_cpm_pm.csv",sep=",")
} else {
cpm<-read.table("../tpm/solar/Cam_cpm10min.csv",sep=",")
cpm_am<-read.table("../tpm/solar/Cam_cpm_am10min.csv",sep=",")
cpm_pm<-read.table("../tpm/solar/Cam_cpm_pm10min.csv",sep=",")
}
# first column is the bins,so separate that off
#cpm[1,]<-NULL
bins<-cpm[,1]
cpm[,1]<-NULL
bins_am<-cpm_am[,1]
cpm_am[,1]<-NULL
bins_pm<-cpm_pm[,1]
cpm_pm[,1]<-NULL
phi=(pi/180)*50
S0=1150
#Stochastic generation of synthetic data
perday<-ifelse(min10,144,1440)
perday
source("SolarFunctions.R")
#####################################################################
# Load data
#####################################################################
min10=FALSE
# cleaned data
#data<-readRDS("../data/cleaned/Cam2001n.csv")
data<-readRDS("../data/cleaned/solar/CamBSRN_Solar1min/Cam2014n.rds")
# sunrise and sunset times
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
# cpm matrix for given location
if (!min10){
cpm<-read.table("../tpm/solar/Cam_cpm.csv",sep=",")
cpm_am<-read.table("../tpm/solar/Cam_cpm_am.csv",sep=",")
cpm_pm<-read.table("../tpm/solar/Cam_cpm_pm.csv",sep=",")
} else {
cpm<-read.table("../tpm/solar/Cam_cpm10min.csv",sep=",")
cpm_am<-read.table("../tpm/solar/Cam_cpm_am10min.csv",sep=",")
cpm_pm<-read.table("../tpm/solar/Cam_cpm_pm10min.csv",sep=",")
}
# first column is the bins,so separate that off
#cpm[1,]<-NULL
bins<-cpm[,1]
cpm[,1]<-NULL
bins_am<-cpm_am[,1]
cpm_am[,1]<-NULL
bins_pm<-cpm_pm[,1]
cpm_pm[,1]<-NULL
phi=(pi/180)*50
S0=1150
#Stochastic generation of synthetic data
perday<-ifelse(min10,144,1440)
perday
source("SolarFunctions.R")
#####################################################################
# Load data
#####################################################################
min10=TRUE
# cleaned data
#data<-readRDS("../data/cleaned/Cam2001n.csv")
data<-readRDS("../data/cleaned/solar/CamBSRN_Solar1min/Cam2014n.rds")
# sunrise and sunset times
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
# cpm matrix for given location
if (!min10){
cpm<-read.table("../tpm/solar/Cam_cpm.csv",sep=",")
cpm_am<-read.table("../tpm/solar/Cam_cpm_am.csv",sep=",")
cpm_pm<-read.table("../tpm/solar/Cam_cpm_pm.csv",sep=",")
} else {
cpm<-read.table("../tpm/solar/Cam_cpm10min.csv",sep=",")
cpm_am<-read.table("../tpm/solar/Cam_cpm_am10min.csv",sep=",")
cpm_pm<-read.table("../tpm/solar/Cam_cpm_pm10min.csv",sep=",")
}
# first column is the bins,so separate that off
#cpm[1,]<-NULL
bins<-cpm[,1]
cpm[,1]<-NULL
bins_am<-cpm_am[,1]
cpm_am[,1]<-NULL
bins_pm<-cpm_pm[,1]
cpm_pm[,1]<-NULL
phi=(pi/180)*50
S0=1150
#Stochastic generation of synthetic data
perday<-ifelse(min10,144,1440)
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
head(srss)
?for
()
?for
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
k
steps=seq(srss$sunrise[k]+2,srss$sunset[k],by=10)
steps
floor(srss$sunrise,10)
?floor
round(srss$sunrise,10)
# sunrise and sunset times
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
if(min10) {
srss$sunrise<-10^ceiling(log10(srss$sunrise))
srss$sunset<-10^ceiling(log10(srss$sunset))
}
srss$sunrise
# sunrise and sunset times
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
if(min10) {
srss$sunrise<-ceiling(max(srss$sunrise)/10)*10
srss$sunset<-10^ceiling(max(srss$sunset)/10)*10
}
srss$sunset
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
if(min10) {
srss$sunrise<-ceiling(max(srss$sunrise)/10)*10
srss$sunset<-ceiling(max(srss$sunset)/10)*10
}
srss$sunset
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
if(min10) {
srss$sunrise<-ceiling(max(srss$sunrise)/10)*10
srss$sunset<-ceiling(max(srss$sunset)/10)*10
}
?pretty
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
if(min10) {
srss$sunrise<-round(srss$sunrise,-1)
srss$sunset<-round(srss$sunset,-1)
}
srss$sunset
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
if(min10) {
srss$sunrise<-round(srss$sunrise,-1)
srss$sunset<-round(srss$sunset,-1)
}
# cpm matrix for given location
if (!min10){
cpm<-read.table("../tpm/solar/Cam_cpm.csv",sep=",")
cpm_am<-read.table("../tpm/solar/Cam_cpm_am.csv",sep=",")
cpm_pm<-read.table("../tpm/solar/Cam_cpm_pm.csv",sep=",")
} else {
cpm<-read.table("../tpm/solar/Cam_cpm10min.csv",sep=",")
cpm_am<-read.table("../tpm/solar/Cam_cpm_am10min.csv",sep=",")
cpm_pm<-read.table("../tpm/solar/Cam_cpm_pm10min.csv",sep=",")
}
# first column is the bins,so separate that off
#cpm[1,]<-NULL
bins<-cpm[,1]
cpm[,1]<-NULL
bins_am<-cpm_am[,1]
cpm_am[,1]<-NULL
bins_pm<-cpm_pm[,1]
cpm_pm[,1]<-NULL
phi=(pi/180)*50
S0=1150
#Stochastic generation of synthetic data
perday<-ifelse(min10,144,1440)
mdays<-c(31,28,31,30,31,30,31,31,30,31,30,31)
cmdays<-c(0,cumsum(mdays)[1:11])
permonth<-mdays*perday
maxlim<-10
day1<-1
dayspan<-365
daybegin<-1+(day1-1)*perday
dayend<-(day1+dayspan-1)*perday
datrange<-range(data$SWD[daybegin:dayend])[2]
t=seq(daybegin,dayend)
Q<-solarFlux(S0,phi,t/perday)
v<-rep(0,(length(t)))
swd<-rep(0,(length(t)))
daybegin
dayend
length(t)
k
steps=seq(srss$sunrise[k]+2,srss$sunset[k])
len(steps)
length(steps)
head(srss)
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
steps
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
as.POSIXlt(data$datetime[i])$hour
i
data$datetime[i]
data$datetime[i+1]
length(data)
nrow(data)
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
i
data$datetime[i]
data$datetime[i+1]
as.POSIXlt(data$datetime[i])$hour
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
colIndex
colIndex=min(1,max(0.1,rnorm(1,0,rsd)+rmean))
colIndex
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
tail(srss)
min10
if(min10) {
srss$sunrise<-round(srss$sunrise,-1)
srss$sunset<-round(srss$sunset,-1)
}
tail(srss)
if(min10) {
srss$sunrise<-round(srss$sunrise,-2)
srss$sunset<-round(srss$sunset,-2)
}
start
end
for (day in seq(day1,(day1+dayspan-1),by=1)){
start<-srss[day,2]
end<-srss[day,3]
ymax<-max(max(Q[start:end]),max(data$SWD[start:end]))
plot(t[start:end]/perday,data$SWD[start:end],type="l",ylim=c(0,ymax))
lines(t[start:end]/perday,swd[start:end],type="l",col="blue")
lines(t[start:end]/perday,Q[start:end],type="l",col="red")
}
day
seq(day1,(day1+dayspan-1),by=1)
for (day in seq(day1,(day1+dayspan-1),by=1)){
start<-srss[day,2]
end<-srss[day,3]
if(min10){
start<-start/10
end<-end/10
}
ymax<-max(max(Q[start:end]),max(data$SWD[start:end]))
plot(t[start:end]/perday,data$SWD[start:end],type="l",ylim=c(0,ymax))
lines(t[start:end]/perday,swd[start:end],type="l",col="blue")
lines(t[start:end]/perday,Q[start:end],type="l",col="red")
}
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
ncol(cpm_am)
ncol(cpm_pm)
guess
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
