if(nrow(tab)==1){
tab<-rbind(tab,c(0,0))
}
if(ncol(tab)==1){
tab<-cbind(tab,c(0,0))
}
TPR[i]=tab[2,2]/sum(tab[,2])
FNR[i]=1-TPR[i]
FPR[i]=tab[2,1]/sum(tab[,1])
TER[i]=(tab[1,2]+tab[2,1])/sum(tab)
}
plot(FPR,TPR,type="l",col="blue",xlab="threshold",ylab="Error rate")
plot(threshold,FNR,type="l",col="blue")
lines(threshold,FPR,type="l",col="red")
lines(threshold,TER,type="l",col="black")
plot(FPR,TPR,type="l",col="blue")
plot(threshold,FNR,type="l",col="blue",xlab="threshold",ylab="Error rate")
lines(threshold,FPR,type="l",col="red")
lines(threshold,TER,type="l",col="black")
plot(FPR,TPR,type="l",col="blue",main="ROC curve")
str(lda.pred)
str(lda.pred$posterior)
summary(lda.pred$posterior)
library(pROC)
> auc(default$default, lda.pred)
library(pROC)
auc(Default$default, lda.pred)
install.packages("pROC")
library(pROC)
auc(Default$default, lda.pred)
library(pROC)
auc(Default$default, lda.pred$class)
str(lad.pred)
str(lda.pred)
str(Default)
roc(lda.class,lda.pred$posterior[,2])
roc(lda.class,lda.pred$posterior[,1])
roc(Default$default,lda.pred$posterior[,1])
roc(Default$default,lda.pred$posterior[,2])
roc(Default$default,lda.pred$posterior[,1])
auc(Default$default, lda.pred$posterior[,1])
roc_curve<-roc(Default$default,lda.pred$posterior[,1])
plot(roc_curve)
auc(Default$default, lda.pred$posterior[,1])
roc_curve<-roc(Default$default,lda.pred$posterior[,1],plot=TRUE)
roc_curve<-roc(Default$default,lda.pred$posterior[,1],plot=TRUE,direction=">")
roc_curve<-roc(Default$default,lda.pred$posterior[,1],plot=TRUE,direction="<")
roc_curve<-roc(Default$default,lda.pred$posterior[,1],plot=TRUE,direction=">")
roc_curve<-roc(Default$default,lda.pred$posterior[,1],plot=TRUE,direction=">",auc=TRUE)
roc_curve<-roc(Default$default,lda.pred$posterior[,1],plot=TRUE,direction=">",auc=TRUE)
library(pROC)
roc_curve<-roc(Default$default,lda.pred$posterior[,1],plot=TRUE,direction=">",auc=TRUE)
#plot(roc_curve)
auc(Default$default, lda.pred$posterior[,1])
?dbinom()
hist(dbinom(62,100,.6))
hist(dbinom(62,100,.6))
dbinom(62,100,.6)
?binom()
?dbinom()
rbinom(100,100,62)
rbinom(100,1,62)
x<-seq(1,100)
dbinom(x,62,.6)
plot(dbinom(x,62,.6))
plot(dbinom(x,100,.6))
dave<-0.7
carloe<-0.6
x<-seq(1,100)
plot(dbinom(x,100,dave))
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
d<-data.frame(z,dbinom(x,size,dave),dbinom(x,size,carole))
d<-data.frame(x,dbinom(x,size,dave),dbinom(x,size,carole))
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
library(ggplot2)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_hist()
g<-ggplot(data=dat,aes(x=x,y=d))+geom_histogram()
g
g<-ggplot(data=dat,aes(x=x))+geom_histogram()
library(ggplot2)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x))+geom_histogram()
g
library(ggplot2)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=d))+geom_histogram()
g
library(ggplot2)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar()
g
library(ggplot2)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity")
g
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.5))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.2))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.2))
g
library(ggplot2)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4))
g
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col="red"))
g
library(ggplot2)
library(openintro)
data(COL)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[1]))
g
library(ggplot2)
library(openintro)
data(COL)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[7]))
g
library(ggplot2)
library(openintro)
data(COL)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[22]))
g
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[1],fill=COL[1]))
g
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[2],fill=COL[2]))
g
g<-ggplot(data=dat,aes(x=x))+geom_bar(stat="bin",aes(width=0.4,col = COL[2],fill=COL[2]))
g
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="bin",aes(width=0.4,col = COL[2],fill=COL[2]))
g
library(ggplot2)
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[2],fill=COL[2]))
g
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[7],fill=COL[7]))
g
?COL()
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,colour = COL[7],fill=COL[7]))
g
g<-ggplot(data=dat,aes(x=x,y=d,fill=COL[7]))+geom_bar(stat="identity",aes(width=0.4,colour = COL[7],fill=COL[7]))
g
g<-ggplot(data=dat,aes(x=x,y=d,fill=COL[7]))+geom_bar(stat="identity",aes(width=0.4,colour = COL[7]))
g
g<-ggplot(data=dat,aes(x=x,y=d,fill=COL[7]))+geom_bar(stat="identity",aes(width=0.4,colour = COL[7],alpha=0.5))
g
g<-ggplot(data=dat,aes(x=x,y=d,fill=COL[7]))+geom_bar(stat="identity",aes(width=0.4,colour = COL[7],alpha=0.3))
g
?Rmarkdown
?markdown
knit_engines$set()
?cat
qnorm(-3.7,0,1.7)
pnorm(-3.7,0,1.7)
?swirl
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
?InstallCourses
install_from_swirl(Getting and Cleaning Data, dev = FALSE, mirror = "github")
install_from_swirl(Getting_and_Cleaning_Data, dev = FALSE, mirror = "github")
SWIRL()
swirl()
7/(200000/10000)
7/(10000/200000)
?source
setwd("H:/Rspace/RE_Community/SolarLab/Rcode")
source("SolarFunctions.R")
#####################################################################
# Load data
#####################################################################
# cleaned data
#data<-readRDS("../data/cleaned/Cam2001n.csv")
data<-readRDS("../data/cleaned/Cam2003n.csv")
# sunrise and sunset times
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
# cpm matrix for given location
cpm<-read.table("../tpm/Cam_cpm.csv",sep=",")
# first column is the bins,so separate that off
#cpm[1,]<-NULL
bins<-cpm[,1]
cpm[,1]<-NULL
phi=(pi/180)*50
S0=1100
# # Solar Functions
# ################################################################################
# # declination angle
# deltaOdot<-function(t){
#   # t is the time in day number 1-365
#   #t<-t*365
#   asin(sin(-0.4091)*cos((2*pi/365.24)*(t+10)+0.0334*sin((2*pi/365.24)*(t-2))))
# }
#
# #sunrise and sunset hour angle
# h0<-function(phi,t){
#   #t is day number
#   acos(tan(phi)*tan(deltaOdot(t)))
# }
#
# #cosine of zenith angle
# cosTheta<-function(phi,delta,h){
#   # theta is the zenith angle
#   sin(phi)*sin(delta)+cos(phi)*cos(delta)*cos(h)
# }
#
# # solar flux
# solarFlux<-function(S0,phi,t){
#   # S0 is solar constant
#   # phi is latitude in radians
#   # t is day of year
#
#   # hour angle -pi to pi
#   h<-pi*(2*(t-floor(t))-1)
#   # declination angle
#   delta<-deltaOdot(t)
#   flux<-S0*cosTheta(phi,delta,h)
#   # make it zero at nighttime (when cos theta is negative)
#   flux<-pmax(flux,rep(0,length(t)))
#   flux
# }
source("SolarFunctions.R")
#####################################################################
# Load data
#####################################################################
# cleaned data
#data<-readRDS("../data/cleaned/Cam2001n.csv")
data<-readRDS("../data/cleaned/Cam2003n.csv")
# sunrise and sunset times
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
# cpm matrix for given location
cpm<-read.table("../tpm/Cam_cpm.csv",sep=",")
# first column is the bins,so separate that off
#cpm[1,]<-NULL
bins<-cpm[,1]
cpm[,1]<-NULL
phi=(pi/180)*50
S0=1100
#Stochastic generation of synthetic data
perday<-1440
mdays<-c(31,28,31,30,31,30,31,31,30,31,30,31)
cmdays<-c(0,cumsum(mdays)[1:11])
permonth<-mdays*perday
maxlim<-10
day1<-1
dayspan<-365
daybegin<-1+(day1-1)*perday
dayend<-(day1+dayspan-1)*perday
datrange<-range(data$SWD[daybegin:dayend])[2]
t=seq(daybegin,dayend)
Q<-solarFlux(S0,phi,t/perday)
v<-rep(0,(length(t)))
swd<-rep(0,(length(t)))
for (k in day1:(day1+dayspan-1)){
rmean<-ifelse(k < 90 | k > 270,0.39,0.55)
rsd<-ifelse(k < 90 | k > 270,0.4,0.2)
#cat(k," ")
dbegin<-1+(k-1)*perday
dend<-k*perday
for(minute in dbegin:srss$sunrise[k]){
swd[minute-daybegin]=0
}
for(minute in srss$sunset[k]:dend){
swd[minute-daybegin]=0
}
v[srss$sunrise[k]+1]<-90#round((nrow(cpm)-1)*runif(1),0)+1#ifelse(k==1,round((nrow(cpm)-1)*runif(1),0)+1,v[srss$sunset[k-1]-1])
mincount=0
maxcount=0
for (i in (srss$sunrise[k]+2):srss$sunset[k]){
colIndex=min(1,max(0.1,rnorm(1,0,rsd)+rmean))
j=1
while (cpm[v[i-1],j] < colIndex){
j=j+1
}
v[i]=j
#         if (j==1 && v[i-1]==1) mincount=mincount+1
#         if (j==max(bins) && v[i-1]==max(bins) ) maxcount =maxcount+1
#         if (mincount == maxlim | maxcount == maxlim){
#             print(paste("maxlim reached: min= ",mincount," max= ",maxcount))
#             v[i]=max(bins)/2
#             mincount=0
#             maxcount=0
#         }
#v[i]=min(j,nrow(cpm))
#v[i]=max(1,j)
Qnow<-solarFlux(S0,phi,i/perday)
swd[i-daybegin]<-(v[i]/max(bins))*Qnow #*datrange)
}
#cat(k,":",round(v[i-1],0),j," ")
cat (k,",",bins[v[i]],": ",sep="")
}
rm(list=ls())
source("SolarFunctions.R")
#####################################################################
# Load data
#####################################################################
# cleaned data
#data<-readRDS("../data/cleaned/Cam2001n.csv")
data<-readRDS("../data/cleaned/Cam2003n.csv")
# sunrise and sunset times
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
# cpm matrix for given location
cpm<-read.table("../tpm/Cam_cpm.csv",sep=",")
# first column is the bins,so separate that off
#cpm[1,]<-NULL
bins<-cpm[,1]
cpm[,1]<-NULL
phi=(pi/180)*50
S0=1100
#Stochastic generation of synthetic data
perday<-1440
mdays<-c(31,28,31,30,31,30,31,31,30,31,30,31)
cmdays<-c(0,cumsum(mdays)[1:11])
permonth<-mdays*perday
maxlim<-10
day1<-1
dayspan<-31
daybegin<-1+(day1-1)*perday
dayend<-(day1+dayspan-1)*perday
datrange<-range(data$SWD[daybegin:dayend])[2]
t=seq(daybegin,dayend)
Q<-solarFlux(S0,phi,t/perday)
v<-rep(0,(length(t)))
swd<-rep(0,(length(t)))
for (k in day1:(day1+dayspan-1)){
rmean<-ifelse(k < 90 | k > 270,0.39,0.55)
rsd<-ifelse(k < 90 | k > 270,0.4,0.2)
#cat(k," ")
dbegin<-1+(k-1)*perday
dend<-k*perday
for(minute in dbegin:srss$sunrise[k]){
swd[minute-daybegin]=0
}
for(minute in srss$sunset[k]:dend){
swd[minute-daybegin]=0
}
v[srss$sunrise[k]+1]<-90#round((nrow(cpm)-1)*runif(1),0)+1#ifelse(k==1,round((nrow(cpm)-1)*runif(1),0)+1,v[srss$sunset[k-1]-1])
mincount=0
maxcount=0
for (i in (srss$sunrise[k]+2):srss$sunset[k]){
colIndex=min(1,max(0.1,rnorm(1,0,rsd)+rmean))
j=1
while (cpm[v[i-1],j] < colIndex){
j=j+1
}
v[i]=j
#         if (j==1 && v[i-1]==1) mincount=mincount+1
#         if (j==max(bins) && v[i-1]==max(bins) ) maxcount =maxcount+1
#         if (mincount == maxlim | maxcount == maxlim){
#             print(paste("maxlim reached: min= ",mincount," max= ",maxcount))
#             v[i]=max(bins)/2
#             mincount=0
#             maxcount=0
#         }
#v[i]=min(j,nrow(cpm))
#v[i]=max(1,j)
Qnow<-solarFlux(S0,phi,i/perday)
swd[i-daybegin]<-(v[i]/max(bins))*Qnow #*datrange)
}
#cat(k,":",round(v[i-1],0),j," ")
cat (k,",",bins[v[i]],": ",sep="")
}
sum(swd)/sum(Q)
sum(swd)/sum(data$SWD[daybegin:dayend])
sum(data$SWD[daybegin:dayend])/sum(Q)
months<-dayend/(30*perday)
simtotal=0
meastotal=0
for (i in 1:months) {
monthbegin<-cmdays[i]*perday+1
monthend<-(cmdays[i]+mdays[i])*perday
simtotal<-simtotal+sum(swd[monthbegin:monthend])
meastotal<-meastotal+sum(data$SWD[monthbegin:monthend])
monthratio<-sum(swd[monthbegin:monthend])/sum(data$SWD[monthbegin:monthend])
print(paste(i,": ",monthbegin,monthend,round(monthratio,2),round(simtotal/meastotal,2)))
}
sum(data$SWD[daybegin:dayend])/(60*1000)
sum(swd)/(60*1000)
summary(swd[swd>0])
hist(swd[swd>0],breaks=50)
summary(data$SWD[data$SWD>0])
hist(data$SWD[data$SWD>0],breaks=50)
# plot(t/1440,Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,1500))
# lines(t/1440,swd,type="l",col="blue")
# lines(t/1440,Q,type="l",col="red")
#day<-183
for (day in seq(day1,(day1+dayspan-1),by=3)){
start<-srss[day,2]
end<-srss[day,3]
ymax<-max(max(Q[start:end]),max(data$SWD[start:end]))
plot(t[start:end]/perday,data$SWD[start:end],type="l",ylim=c(0,ymax))
lines(t[start:end]/perday,swd[start:end],type="l",col="blue")
lines(t[start:end]/perday,Q[start:end],type="l",col="red")
}
maxSWD<-0
maxBin<-0
nbin<-100
file_handles<-c("Cam2001n.csv","Cam2002n.csv","Cam2003n.csv","Cam2004n.csv","Cam2005n.csv","Cam2006n.csv","Cam2007n.csv","Cam2008n.csv")
path<-"../data/cleaned/"
# find max bin number and  range of data
for (file in 1:length(file_handles)){
fullname<-paste0(path,file_handles[file])
#print (fullname)
data<-readRDS(fullname)
maxSWD<-max(maxSWD,max(data$SWD))
maxBin<-max(maxBin,max(floor((data$SWD/maxSWD)*0.999*nbin)+1))
print (maxBin)
}
# set up TPM
tpm<-matrix(0, nrow = maxBin, ncol =maxBin)
file=1
fullname<-paste0(path,file_handles[file])
print (paste("Adding ",fullname," to TPM"))
data<-readRDS(fullname)
data$datetime[1]
data$datetime[2]
data$datetime[1000] %% 1
data$datetime[1000] %/% 1
data$datetime[1000]
as.numeric(data$datetime[1000])
as.POSIXct(data$datetime[1000])
as.POSIXct(data$datetime[1000])$hour
?POSIXct
a<-
as.POSIXct(data$datetime[1000])
a
a$hour
as.POSIXlt(data$datetime[1000])
a<-as.POSIXlt(data$datetime[1000])
a$hour
as.POSIXlt(data$datetime[1000])$hour
read.table("project_label_BSRN_event_label_CAM_guidelines.tab",sep="\t",stringsAsFactors=FALSE)
setwd("H:/Rspace/RE_Community")
read.table("project_label_BSRN_event_label_CAM_guidelines.tab",sep="\t",stringsAsFactors=FALSE)
data<-read.table("project_label_BSRN_event_label_CAM_guidelines.tab",sep="\t",stringsAsFactors=FALSE)
str(data)
data<-read.table("project_label_BSRN_event_label_CAM_guidelines.tab",sep="\t",stringsAsFactors=FALSE,headers=TRUE)
data<-read.table("project_label_BSRN_event_label_CAM_guidelines.tab",sep="\t",stringsAsFactors=FALSE,header=TRUE)
str(data)
summary(data)
hist(data[,3])
setwd("H:/Rspace/RE_Community/SolarLab/Rcode")
source('H:/Rspace/RE_Community/SolarLab/Rcode/GetAndCleanData.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/GetAndCleanData.R')
narows
day<-355
dayspan<-10
daybegin<-day*1440
dayend<-(day+dayspan)*1440
plot(t[daybegin:dayend],data$SWD[daybegin:dayend],type="l",ylim=c(0,1500))
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="blue")
setwd("H:/Rspace/RE_Community/SolarLab/Rcode")
source('H:/Rspace/RE_Community/SolarLab/Rcode/GetAndCleanData.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/GetAndCleanData.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarTPM.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/GetAndCleanData.R')
narows
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarTPM.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarTPM.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
source('H:/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R')
