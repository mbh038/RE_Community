}
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
probs<-data.frame(exact=numeric(),approx=numeric())
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
probs=cbind(exact,approx)
plot(exact,approx,main="N=",N,"p=",p)
abline(0,1,col="red")
}
}
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
probs<-data.frame(exact=numeric(),approx=numeric())
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
probs=cbind(exact,approx)
plot(exact,approx,main=paste("N=",N," p=",p))
abline(0,1,col="red")
}
}
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
probs<-data.frame(exact=numeric(),approx=numeric())
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
probs=cbind(exact,approx)
plot(exact,approx,main=paste("N=",N," p=",p))
abline(0,1,col="red")
}
}
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
library(rafalib)
mypar2(4,5)
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
LIM <- range(c(approx,exact))
plot(exact,approx,main=paste("N =",N," p = ",p),xlim=LIM,ylim=LIM,col=1,pch=16)
abline(0,1)
}
}
mypar(4,5)
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
library(rafalib)
mypar(4,5)
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
LIM <- range(c(approx,exact))
plot(exact,approx,main=paste("N =",N," p = ",p),xlim=LIM,ylim=LIM,col=1,pch=16)
abline(0,1)
}
}
Ns <- c(5,10,30,100)
ps <- c(0.01,0.10,0.5,0.9,0.99)
#library(rafalib)
mypar(4,5)
for (N in Ns){
k<-seq(1,N-1)
for (p in ps){
exact = dbinom(k,N,p)
a <- (k+0.5 - N*p)/sqrt(N*p*(1-p))
b <- (k-0.5 - N*p)/sqrt(N*p*(1-p))
approx = pnorm(a) - pnorm(b)
LIM <- range(c(approx,exact))
plot(exact,approx,main=paste("N =",N," p = ",p),xlim=LIM,ylim=LIM,col=1,pch=16)
abline(0,1)
}
}
library(devtools)
install_github("genomicsclass/dagdata")
library(dagdata)
data(hcmv)
library(rafalib)
mypar()
plot(locations,rep(1,length(locations)),ylab="",yaxt="n")
breaks=seq(0,4000*round(max(locations)/4000),4000)
tmp=cut(locations,breaks)
counts=as.numeric(table(tmp))
hist(counts)
probs <- dpois(counts,4)
likelihood <- prod(probs)
likelihood
?prod
logprobs <- dpois(counts,4,log=TRUE)
loglikelihood <- sum(logprobs)
loglikelihood
?dpois
$\tiny{2}\\small{4}\large{8}\huge{16}$
?randomForest
library(randomForest)
?randomForest
.99*.04
.99*.96
.008+.002+.9504+.0396
.008+.9504
.008/0.9504
mean(9.0,9.8,10.1)
?mean
mean(c(9.0,9.8,10.1))
T<-c(9.0,9.8,10.1)
mean(T)
T2<-c(9.0,10.9,9.4,10.9,9.8,9.9,10.6,9.1)
T2
length(T2)
mean(T2)
T3<-c(9.0,10.9,9.4,10.9,9.8,9.9,10.6,9.1,9.3,10.1,9.7,9.6,9.2,10.7,11.0,11.5,9.8,8.9,11.2,10.0)
table(T3)
length(T3)
mean(T3)
Tw<-c(0,2,4,6,8,10)
rhoSW<-c(1031.364,1031.205,1030.997,1030.763,1030.445,1030.106)
plot(Tw,rhoSW,type="b")
Tw<-c(0,2,4,6,8,10)
rhoSW<-c(1031.364,1031.205,1030.997,1030.763,1030.445,1030.106)
plot(Tw,rhoSW,type="b")
vSW<-1/rhoSW
vSW
Tw<-c(0,2,4,6,8,10)
rhoSW<-c(1031.364,1031.205,1030.997,1030.763,1030.445,1030.106)
vSW<-1/rhoSW
sw<-data.frame(Tw,rhoSW,vSW)
names(sw)<-c("T","density","v")
plot(sw
plot(sw$T,sw$density,type="b",col="blue")
plot(sw$T,sw$density,type="b",col="blue",xlab="Temperature (C)",ylab="density kg/m3")
sw[sw$T==8,v]
sw[sw$T==8,sw$v]
v8<-sw[sw$T==8,sw$v]
v8
sw
v8<-sw[sw$T=8,sw$v]
v8
v8<-sw[which(sw$T==8),sw$v]
v8
v8
sw
sw[which(sw$T==8),sw$v]
?sw
sw[which(sw$T==8),]
sw[which(sw$T==8),3]
v8<-sw[which(sw$T==8),3]
v4<-sw[which(sw$T==4),3]
100*(v8-v4)/v4
v8<-sw[which(sw$T==8),3]
v4<-sw[which(sw$T==4),3]
dv<-100*(v8-v4)/v4
dv
v8<-sw[which(sw$T==8),3]
v4<-sw[which(sw$T==4),3]
dv<-(v8-v4)/v4
dv
4000*dv
vIce<-2.85e15 #m3
rhoIce<-916.9 #kg/m3
mIce<-vIce*rhoIce
vIce<-2.85e15 #volume of ice m3
rhoIce<-916.9 #density of ice kg/m3
mIce<-vIce*rhoIce # mass of ice
rhoWater<-1000 # density of water kg/m3
vMeltWater<-mIce/rhoWater # volume of melt water
aOcean<-0.7*4*pi*(6300e3)^2 # area of oceans
dh<-vMeltWater/aOcean # increase in sea level
dh
tau<-55
C88<-1
Ct<-function(t,tau,C0){
C0*exp(-t/tau)
}
t<-tau*log(0.2)
t
Ct(t,tau,1)
tau<-55
C88<-1
Ct<-function(t,tau,C0){
C0*exp(-t/tau)
}
t<-tau*log(0.2)
t
Ct(t,tau,1)
tau<-55
C88<-1
Ct<-function(t,tau,C0){
C0*exp(-t/tau)
}
t<--tau*log(0.2)
t
Ct(t,tau,1)
tau<-55
C88<-1
Ct<-function(t,tau,C0){
C0*exp(-t/tau)
}
dt<--tau*log(0.2)
dt
Ct(dt,tau,1)
dt+1988
Ct(dt,140,1)
CFC11_tau<-55
CFC11_rf<-1.0 # Wm-2 per Tg
CFC11_gwp100<-4750
CFC12_tau<-140
CFC12_rf<-1.5 # Wm-2 per Tg
(CFC12_tau/CFC11_tau)
CFC11_tau<-55
CFC11_rf<-1.0 # Wm-2 per Tg
CFC11_gwp100<-4750
CFC12_tau<-140
CFC12_rf<-1.5 # Wm-2 per Tg
(CFC12_tau/CFC11_tau)*(exp(-100/CFC12_tau)-1)/(exp(-100/CFC11_tau)-1)
CFC11_tau<-55
CFC11_rf<-1.0 # Wm-2 per Tg
CFC11_gwp100<-4750
CFC12_tau<-140
CFC12_rf<-1.5 # Wm-2 per Tg
# average concentration ratio over 100 years
c12c11ratio<-(CFC12_tau/CFC11_tau)*(exp(-100/CFC12_tau)-1)/(exp(-100/CFC11_tau)-1)
CFC12_gwp100<-CFC11_gwp100*c12c11ratio*CFC12_rf/CFC11_rf
CFC12_gwp100
$$C=C_0 \exp\left(\frac{-t}{\tau}\right)$$
source('C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode/SolarTPM.R', echo=TRUE)
setwd("C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode")
source('C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode/SolarTPM.R', echo=TRUE)
sum(spm_am)
# repeat for pm
spm_pm<-numeric(maxBin)
for (i in 1 :nrow(tpm_pm)){
spm_pm[i]=sum(tpm_pm[i,])
}
sum(spm_pm)
sum(spm_am)+sum(spm_pm)-sum(spm)
## Remove any rows or columns that contain only zeros.
tpmr<-tpm
count=0
bins<-seq(1,maxBin)
for (i in 1 :nrow(tpm)){
if (sum(tpm[i,])==0) {
bins<-bins[-(i-count)]
tpmr<-tpmr[-(i-count),]
tpmr<-tpmr[,-(i-count)]
count=count+1
}
}
print (paste(count," bins were empty and have been removed"))
#str(tpmr)
bins
maxBin<-max(bins)
# repeat for am only
tpmr_am<-tpm_am
count=0
bins_am<-seq(1,maxBin)
for (i in 1 :nrow(tpm_am)){
if (sum(tpm_am[i,])==0) {
bins_am<-bins_am[-(i-count)]
tpmr_am<-tpmr_am[-(i-count),]
tpmr_am<-tpmr_am[,-(i-count)]
count=count+1
}
}
print (paste(count," am bins were empty and have been removed"))
#str(tpmr)
bins_am
maxBin_am<-max(bins_am)
# repeat for pm only
tpmr_pm<-tpm_pm
count=0
bins_pm<-seq(1,maxBin)
for (i in 1 :nrow(tpm_pm)){
if (sum(tpm_pm[i,])==0) {
bins_pm<-bins_pm[-(i-count)]
tpmr_pm<-tpmr_pm[-(i-count),]
tpmr_pm<-tpmr_pm[,-(i-count)]
count=count+1
}
}
print (paste(count," pm bins were empty and have been removed"))
#str(tpmr)
bins_pm
maxBin_pm<-max(bins_pm)
## Sums of each row of TPMr
spmr<-numeric(nrow(tpmr))
for (i in 1 :nrow(tpmr)){
spmr[i]=sum(tpmr[i,])
}
sum(spmr)
# repeat for am
spmr_am<-numeric(nrow(tpmr_am))
for (i in 1 :nrow(tpmr_am)){
spmr_am[i]=sum(tpmr_am[i,])
}
sum(spmr_am)
# repeat for pm
spmr_pm<-numeric(nrow(tpmr_pm))
for (i in 1 :nrow(tpmr_pm)){
spmr_pm[i]=sum(tpmr_pm[i,])
}
sum(spmr_pm)
## TPM as probabilities
tpmp<-tpmr
for (i in 1 :nrow(tpmr)){
tpmp[i,]=tpmr[i,]/spmr[i]
}
sum(tpmp)
# repeat for am
tpmp_am<-tpmr_am
for (i in 1 :nrow(tpmr_am)){
tpmp_am[i,]=tpmr_am[i,]/spmr_am[i]
}
sum(tpmp_am)
# repeat for pm
tpmp_pm<-tpmr_pm
for (i in 1 :nrow(tpmr_pm)){
tpmp_pm[i,]=tpmr_pm[i,]/spmr_pm[i]
}
sum(tpmp_pm)
## TPM-> CPM: cumulative probabilities
cpm<-matrix(0, nrow = maxBin, ncol =maxBin)
cpm<-tpmp
for (i in 1 : nrow(tpmp)){
for (j in 1 :ncol(tpmp)){
cpm[i,j]=sum(tpmp[i,1:j])
}
}
cpm<-cbind(bins,cpm)
# repeat for am
cpm_am<-matrix(0, nrow = maxBin_am, ncol =maxBin_am)
cpm_am<-tpmp_am
# TPM-> CPM: cumulative probabilities
for (i in 1 : nrow(tpmp_am)){
for (j in 1 :ncol(tpmp_am)){
cpm_am[i,j]=sum(tpmp_am[i,1:j])
}
}
cpm_am<-cbind(bins_am,cpm_am)
# repeat for pm
cpm_pm<-matrix(0, nrow = maxBin_pm, ncol =maxBin_pm)
cpm_pm<-tpmp_pm
# TPM-> CPM: cumulative probabilities
for (i in 1 : nrow(tpmp_pm)){
for (j in 1 :ncol(tpmp_pm)){
cpm_pm[i,j]=sum(tpmp_pm[i,1:j])
}
}
cpm_pm<-cbind(bins_pm,cpm_pm)
# write out to file
write.table(cpm,"../tpm/Cam_cpm.csv",sep=",",row.names=FALSE,col.names=FALSE)
write.table(cpm_am,"../tpm/Cam_cpm_am.csv",sep=",",row.names=FALSE,col.names=FALSE)
write.table(cpm_pm,"../tpm/Cam_cpm_pm.csv",sep=",",row.names=FALSE,col.names=FALSE)
sum(spm_am)+sum(spm_pm)-sum(spm)
sum(spm)
sum(spm_am)
spm_am<-numeric(maxBin)
for (i in 1 :nrow(tpm_am)){
spm_am[i]=sum(tpm_am[i,])
}
sum(spm_am)
# repeat for pm
spm_pm<-numeric(maxBin)
for (i in 1 :nrow(tpm_pm)){
spm_pm[i]=sum(tpm_pm[i,])
}
sum(spm_pm)
sum(spm_am)+sum(spm_pm)-sum(spm)
## Remove any rows or columns that contain only zeros.
tpmr<-tpm
count=0
bins<-seq(1,maxBin)
for (i in 1 :nrow(tpm)){
if (sum(tpm[i,])==0) {
bins<-bins[-(i-count)]
tpmr<-tpmr[-(i-count),]
tpmr<-tpmr[,-(i-count)]
count=count+1
}
}
print (paste(count," bins were empty and have been removed"))
#str(tpmr)
bins
maxBin<-max(bins)
# repeat for am only
tpmr_am<-tpm_am
count=0
bins_am<-seq(1,maxBin)
for (i in 1 :nrow(tpm_am)){
if (sum(tpm_am[i,])==0) {
bins_am<-bins_am[-(i-count)]
tpmr_am<-tpmr_am[-(i-count),]
tpmr_am<-tpmr_am[,-(i-count)]
count=count+1
}
}
print (paste(count," am bins were empty and have been removed"))
#str(tpmr)
bins_am
maxBin_am<-max(bins_am)
# repeat for pm only
tpmr_pm<-tpm_pm
count=0
bins_pm<-seq(1,maxBin)
for (i in 1 :nrow(tpm_pm)){
if (sum(tpm_pm[i,])==0) {
bins_pm<-bins_pm[-(i-count)]
tpmr_pm<-tpmr_pm[-(i-count),]
tpmr_pm<-tpmr_pm[,-(i-count)]
count=count+1
}
}
print (paste(count," pm bins were empty and have been removed"))
#str(tpmr)
bins_pm
maxBin_pm<-max(bins_pm)
## Sums of each row of TPMr
spmr<-numeric(nrow(tpmr))
for (i in 1 :nrow(tpmr)){
spmr[i]=sum(tpmr[i,])
}
sum(spmr)
# repeat for am
spmr_am<-numeric(nrow(tpmr_am))
for (i in 1 :nrow(tpmr_am)){
spmr_am[i]=sum(tpmr_am[i,])
}
sum(spmr_am)
# repeat for pm
spmr_pm<-numeric(nrow(tpmr_pm))
for (i in 1 :nrow(tpmr_pm)){
spmr_pm[i]=sum(tpmr_pm[i,])
}
sum(spmr_pm)
## TPM as probabilities
tpmp<-tpmr
for (i in 1 :nrow(tpmr)){
tpmp[i,]=tpmr[i,]/spmr[i]
}
sum(tpmp)
# repeat for am
tpmp_am<-tpmr_am
for (i in 1 :nrow(tpmr_am)){
tpmp_am[i,]=tpmr_am[i,]/spmr_am[i]
}
sum(tpmp_am)
# repeat for pm
tpmp_pm<-tpmr_pm
for (i in 1 :nrow(tpmr_pm)){
tpmp_pm[i,]=tpmr_pm[i,]/spmr_pm[i]
}
sum(tpmp_pm)
## TPM-> CPM: cumulative probabilities
cpm<-matrix(0, nrow = maxBin, ncol =maxBin)
cpm<-tpmp
for (i in 1 : nrow(tpmp)){
for (j in 1 :ncol(tpmp)){
cpm[i,j]=sum(tpmp[i,1:j])
}
}
cpm<-cbind(bins,cpm)
# repeat for am
cpm_am<-matrix(0, nrow = maxBin_am, ncol =maxBin_am)
cpm_am<-tpmp_am
# TPM-> CPM: cumulative probabilities
for (i in 1 : nrow(tpmp_am)){
for (j in 1 :ncol(tpmp_am)){
cpm_am[i,j]=sum(tpmp_am[i,1:j])
}
}
cpm_am<-cbind(bins_am,cpm_am)
# repeat for pm
cpm_pm<-matrix(0, nrow = maxBin_pm, ncol =maxBin_pm)
cpm_pm<-tpmp_pm
# TPM-> CPM: cumulative probabilities
for (i in 1 : nrow(tpmp_pm)){
for (j in 1 :ncol(tpmp_pm)){
cpm_pm[i,j]=sum(tpmp_pm[i,1:j])
}
}
cpm_pm<-cbind(bins_pm,cpm_pm)
# write out to file
write.table(cpm,"../tpm/Cam_cpm.csv",sep=",",row.names=FALSE,col.names=FALSE)
write.table(cpm_am,"../tpm/Cam_cpm_am.csv",sep=",",row.names=FALSE,col.names=FALSE)
write.table(cpm_pm,"../tpm/Cam_cpm_pm.csv",sep=",",row.names=FALSE,col.names=FALSE)
source('C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R', echo=TRUE)
str(data)
source('C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R', echo=TRUE)
source('C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R', echo=TRUE)
source('C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode/SolarMarkov.R', echo=TRUE)
rm(list=ls())
