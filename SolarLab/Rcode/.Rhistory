if (data$datetime[nrow(data)]!=finalmin){
missing<-cbind(finalmin,as.data.frame(matrix(rep(0,4),1,4)))
names(missing)<-names(data)
data<-rbind(data,missing)
}
# Inspect data
######################################################################
str(data)
summary(data)
phi=(pi/180)*50
S0=1050
t=seq(1,days+1,length.out=days*1440)
Q<-solarFlux(S0,phi,t)
# detect missing rows - insert missing datetimes
last<-vector()
first<-vector()
begin<-as.POSIXct(vector())
end<-as.POSIXct(vector())
nmissing<-vector()
count=0
first[1]<-1
for (i in 2:(length(t)-1)){
if (as.numeric(data$datetime[i]-data$datetime[i-1])>1){
count=count+1
last[count]<-i-1
first[count+1]<-i
begin[count]<-(data$datetime[i-1]+60)
end[count]<-(data$datetime[i]-60)
nmissing[count]<-difftime(end[count],begin[count],units="min")+1
print (paste0("Missing data from: ",begin[count]," to: ",end[count]," N missing: ",nmissing[count]))
missing<-cbind(seq(begin[count],end[count],by="1 min"),as.data.frame(matrix(rep(0,nmissing[count]*4),nmissing[count],4)))
names(missing)<-names(data)
firstpart<-data[1:last[count],]
lastpart<-data[(last[count]+1):nrow(data),]
data<-rbind(firstpart,missing,lastpart)
print("Hello world")
#names(data)<-names
i<-i+nmissing[count]
}
}
last[count+1]=nrow(data)
last
first
nmissing
# Inspect portions of the data
day<-245
dayspan<-1
daybegin<-day*1440
dayend<-(day+dayspan)*1440
plot(t[daybegin:dayend],data$SWD[daybegin:dayend],type="l",ylim=c(0,1500))
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="blue")
str(data)
summary(data)
## Impute NAs (check there are not too many)
narows<-which(is.na(data$SWD))
narows
if(sum(narows)>0){
#data$SWD[narows]<-mean(data$SWD[min(narows)-1],data$SWD[max(narows)+1])
data$SWD[narows]<-0
}
summary(data)
str(data)
# save cleaned data to csv
opfile_stem<-"../data/cleaned/Cam"
opfile_end<-"n.csv"
opfullfilename<-paste0(opfile_stem,year,opfile_end)
saveRDS(data, opfullfilename)
# clean workspace
rm(data,Q,t)
year<-"2008"
days<-ifelse(as.numeric(year) %% 4 == 0,366,365)
file_stem<-"../data/raw/project_label_BSRN_event_label_CAM_"
file_end<-".tsv"
full_name<-paste0(file_stem,year,file_end)
library(lubridate)
data<- read.table(full_name,sep="\t", header=TRUE,stringsAsFactors=FALSE)
str(data)
summary(data)
names<-c("datetime","DIF","LWD","SWD","DIR","ORG")
names(data)<-names
# convert time to POSIXct
data$datetime<-ymd_hms(data$datetime)
# remove last column
data$ORG<-NULL
firstmin<-ymd_hms(paste0(year,"/01/01 00:00:00"))
if (data$datetime[1]!=firstmin){
missing<-cbind(firstmin,as.data.frame(matrix(rep(0,4),1,4)))
names(missing)<-names(data)
data<-rbind(missing,data)
}
finalmin<-ymd_hms(paste0(year,"/12/31 23:59:00"))
if (data$datetime[nrow(data)]!=finalmin){
missing<-cbind(finalmin,as.data.frame(matrix(rep(0,4),1,4)))
names(missing)<-names(data)
data<-rbind(data,missing)
}
# Inspect data
######################################################################
str(data)
summary(data)
phi=(pi/180)*50
S0=1050
t=seq(1,days+1,length.out=days*1440)
Q<-solarFlux(S0,phi,t)
# detect missing rows - insert missing datetimes
last<-vector()
first<-vector()
begin<-as.POSIXct(vector())
end<-as.POSIXct(vector())
nmissing<-vector()
count=0
first[1]<-1
for (i in 2:(length(t)-1)){
if (as.numeric(data$datetime[i]-data$datetime[i-1])>1){
count=count+1
last[count]<-i-1
first[count+1]<-i
begin[count]<-(data$datetime[i-1]+60)
end[count]<-(data$datetime[i]-60)
nmissing[count]<-difftime(end[count],begin[count],units="min")+1
print (paste0("Missing data from: ",begin[count]," to: ",end[count]," N missing: ",nmissing[count]))
missing<-cbind(seq(begin[count],end[count],by="1 min"),as.data.frame(matrix(rep(0,nmissing[count]*4),nmissing[count],4)))
names(missing)<-names(data)
firstpart<-data[1:last[count],]
lastpart<-data[(last[count]+1):nrow(data),]
data<-rbind(firstpart,missing,lastpart)
print("Hello world")
#names(data)<-names
i<-i+nmissing[count]
}
}
last[count+1]=nrow(data)
last
first
nmissing
# Inspect portions of the data
day<-245
dayspan<-1
daybegin<-day*1440
dayend<-(day+dayspan)*1440
plot(t[daybegin:dayend],data$SWD[daybegin:dayend],type="l",ylim=c(0,1500))
lines(t[daybegin:dayend],Q[daybegin:dayend],type="l",col="blue")
str(data)
summary(data)
## Impute NAs (check there are not too many)
narows<-which(is.na(data$SWD))
narows
if(sum(narows)>0){
#data$SWD[narows]<-mean(data$SWD[min(narows)-1],data$SWD[max(narows)+1])
data$SWD[narows]<-0
}
summary(data)
str(data)
# save cleaned data to csv
opfile_stem<-"../data/cleaned/Cam"
opfile_end<-"n.csv"
opfullfilename<-paste0(opfile_stem,year,opfile_end)
saveRDS(data, opfullfilename)
#Generates a tpm and cpm matric from actual solar data.
maxSWD<-0
maxBin<-0
nbin<-100
file_handles<-c("Cam2001n.csv","Cam2002n.csv","Cam2003n.csv","Cam2004n.csv","Cam2005n.csv","Cam2006n.csv","Cam2007n.csv","Cam2008n.csv")
path<-"../data/cleaned/"
# find max bin number and  range of data
for (file in 1:length(file_handles)){
fullname<-paste0(path,file_handles[file])
#print (fullname)
data<-readRDS(fullname)
maxSWD<-max(maxSWD,max(data$SWD))
maxBin<-max(maxBin,max(floor((data$SWD/maxSWD)*0.999*nbin)+1))
print (maxBin)
}
# set up TPM
tpm<-matrix(0, nrow = maxBin, ncol =maxBin)
# Load cleaned data
########################################################################
# loop through data file and add bin counts to TPM
for (file in 1:length(file_handles)){
fullname<-paste0(path,file_handles[file])
print (paste("Adding ",fullname," to TPM"))
data<-readRDS(fullname)
# Markov Chain
########################################################################
data<-data[data$SWD>0,]
# log transform the data
# reference$SWD<-(reference$SWD)
# reference$SWD[reference$SWD=="-Inf"]=0
# bin into 100 levels
data$bin<-floor((data$SWD/maxSWD)*0.999*nbin)+1
table(data$bin)
sum(table(data$bin))
hist(data$bin,main=file_handles[file],xlab="Bin")
# loop to generate TPM counts
for (i in 1:(nrow(data)-1)){
tpm[data$bin[i],data$bin[i+1]] <-tpm[data$bin[i],data$bin[i+1]] + 1
}
}
rm(data)
tpm[1,]
#summary(tpm)
#print(tpm)
sum(tpm[1,])
spm<-numeric(maxBin)
# sums of each row of TPM
for (i in 1 :nrow(tpm)){
spm[i]=sum(tpm[i,])
}
spm
sum(spm)
# remove any rows or columns that contain only zeros.
tpmr<-tpm
count=0
bins<-seq(1,maxBin)
for (i in 1 :nrow(tpm)){
if (sum(tpm[i,])==0) {
bins<-bins[-(i-count)]
tpmr<-tpmr[-(i-count),]
tpmr<-tpmr[,-(i-count)]
count=count+1
}
}
print (paste(count," bins were empty and have been removed"))
#str(tpmr)
bins
maxBin<-max(bins)
spmr<-numeric(nrow(tpmr))
# sums of each row of TPMr
for (i in 1 :nrow(tpmr)){
spmr[i]=sum(tpmr[i,])
}
spmr
sum(spmr)
tpmp<-tpmr
# TPM as probabilities
for (i in 1 :nrow(tpmr)){
tpmp[i,]=tpmr[i,]/spmr[i]
}
sum(tpmp)
# cumulative probability matrix
cpm<-matrix(0, nrow = maxBin, ncol =maxBin)
cpm<-tpmp
# TPM-> CPM: cumulative probabilities
for (i in 1 : nrow(tpmp)){
for (j in 1 :ncol(tpmp)){
cpm[i,j]=sum(tpmp[i,1:j])
}
}
cpm<-cbind(bins,cpm)
write.table(cpm,"../tpm/Cam_cpm.csv",sep=",",row.names=FALSE,col.names=FALSE)
# Solar Functions
################################################################################
# declination angle
deltaOdot<-function(t){
# t is the time in day number 1-365
#t<-t*365
asin(sin(-0.4091)*cos((2*pi/365.24)*(t+10)+0.0334*sin((2*pi/365.24)*(t-2))))
}
#sunrise and sunset hour angle
h0<-function(phi,t){
#t is day number
acos(tan(phi)*tan(deltaOdot(t)))
}
#cosine of zenith angle
cosTheta<-function(phi,delta,h){
# theta is the zenith angle
sin(phi)*sin(delta)+cos(phi)*cos(delta)*cos(h)
}
# solar flux
solarFlux<-function(S0,phi,t){
# S0 is solar constant
# phi is latitude in radians
# t is day of year
# hour angle -pi to pi
h<-pi*(2*(t-floor(t))-1)
# declination angle
delta<-deltaOdot(t)
flux<-S0*cosTheta(phi,delta,h)
# make it zero at nighttime (when cos theta is negative)
flux<-pmax(flux,rep(0,length(t)))
flux
}
#####################################################################
# Load data
#####################################################################
# cleaned data
#data<-readRDS("../data/cleaned/Cam2001n.csv")
data<-readRDS("../data/cleaned/Cam2003n.csv")
# sunrise and sunset times
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
# cpm matrix for given location
cpm<-read.table("../tpm/Cam_cpm.csv",sep=",")
# first column is the bins,so separate that off
#cpm[1,]<-NULL
bins<-cpm[,1]
cpm[,1]<-NULL
phi=(pi/180)*50
S0=1100
#Stochastic generation of synthetic data
perday<-1440
mdays<-c(31,28,31,30,31,30,31,31,30,31,30,31)
cmdays<-c(0,cumsum(mdays)[1:11])
permonth<-mdays*perday
maxlim<-10
day1<-1
dayspan<-365
daybegin<-1+(day1-1)*perday
dayend<-(day1+dayspan-1)*perday
datrange<-range(data$SWD[daybegin:dayend])[2]
t=seq(daybegin,dayend)
Q<-solarFlux(S0,phi,t/perday)
v<-rep(0,(length(t)))
swd<-rep(0,(length(t)))
for (k in day1:(day1+dayspan-1)){
rmean<-ifelse(k < 90 | k > 270,0.39,0.55)
rsd<-ifelse(k < 90 | k > 270,0.4,0.2)
#cat(k," ")
dbegin<-1+(k-1)*perday
dend<-k*perday
for(minute in dbegin:srss$sunrise[k]){
swd[minute-daybegin]=0
}
for(minute in srss$sunset[k]:dend){
swd[minute-daybegin]=0
}
v[srss$sunrise[k]+1]<-90#round((nrow(cpm)-1)*runif(1),0)+1#ifelse(k==1,round((nrow(cpm)-1)*runif(1),0)+1,v[srss$sunset[k-1]-1])
mincount=0
maxcount=0
for (i in (srss$sunrise[k]+2):srss$sunset[k]){
colIndex=min(1,max(0.1,rnorm(1,0,rsd)+rmean))
j=1
while (cpm[v[i-1],j] < colIndex){
j=j+1
}
v[i]=j
#         if (j==1 && v[i-1]==1) mincount=mincount+1
#         if (j==max(bins) && v[i-1]==max(bins) ) maxcount =maxcount+1
#         if (mincount == maxlim | maxcount == maxlim){
#             print(paste("maxlim reached: min= ",mincount," max= ",maxcount))
#             v[i]=max(bins)/2
#             mincount=0
#             maxcount=0
#         }
#v[i]=min(j,nrow(cpm))
#v[i]=max(1,j)
Qnow<-solarFlux(S0,phi,i/perday)
swd[i-daybegin]<-(v[i]/max(bins))*Qnow #*datrange)
}
#cat(k,":",round(v[i-1],0),j," ")
cat (k,",",bins[v[i]],": ",sep="")
}
sum(swd)/sum(Q)
sum(swd)/sum(data$SWD[daybegin:dayend])
sum(data$SWD[daybegin:dayend])/sum(Q)
months<-dayend/(30*perday)
simtotal=0
meastotal=0
for (i in 1:months) {
monthbegin<-cmdays[i]*perday+1
monthend<-(cmdays[i]+mdays[i])*perday
simtotal<-simtotal+sum(swd[monthbegin:monthend])
meastotal<-meastotal+sum(data$SWD[monthbegin:monthend])
monthratio<-sum(swd[monthbegin:monthend])/sum(data$SWD[monthbegin:monthend])
print(paste(i,": ",monthbegin,monthend,round(monthratio,2),round(simtotal/meastotal,2)))
}
sum(data$SWD[daybegin:dayend])/(60*1000)
sum(swd)/(60*1000)
summary(swd[swd>0])
hist(swd[swd>0],breaks=50)
summary(data$SWD[data$SWD>0])
hist(data$SWD[data$SWD>0],breaks=50)
# plot(t/1440,Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,1500))
# lines(t/1440,swd,type="l",col="blue")
# lines(t/1440,Q,type="l",col="red")
#day<-183
for (day in seq(day1,(day1+dayspan-1),by=3)){
start<-srss[day,2]
end<-srss[day,3]
ymax<-max(max(Q[start:end]),max(data$SWD[start:end]))
plot(t[start:end]/perday,data$SWD[start:end],type="l",ylim=c(0,ymax))
lines(t[start:end]/perday,swd[start:end],type="l",col="blue")
lines(t[start:end]/perday,Q[start:end],type="l",col="red")
}
library(dplyr)
newdata<-as.data.frame(cbind(t,swd))
names(newdata)<-c("minutes","swd")
write.csv(newdata,"../data/synthetic/Cam001_1min.csv")
t10<-10*(t %/% 10)
newdata<-as.data.frame(cbind(t10,swd))
names(newdata)<-c("minutes","swd")
new10<-newdata %>% group_by(minutes) %>% summarise_each(funs(mean))
write.csv(new10,"../data/synthetic/Cam001_10min.csv")
# clean up
rm(swd,t,t10,v,newdata,new10)
#####################################################################
# Load data
#####################################################################
# cleaned data
#data<-readRDS("../data/cleaned/Cam2001n.csv")
data<-readRDS("../data/cleaned/Cam2003n.csv")
# sunrise and sunset times
srss<-read.csv("../data/h0times.csv",sep=",")
str(srss)
srss$sunrise<-as.integer(srss$sunrise)
srss$sunset<-as.integer(srss$sunset)
# cpm matrix for given location
cpm<-read.table("../tpm/Cam_cpm.csv",sep=",")
# first column is the bins,so separate that off
#cpm[1,]<-NULL
bins<-cpm[,1]
cpm[,1]<-NULL
phi=(pi/180)*50
S0=1100
#Stochastic generation of synthetic data
perday<-1440
mdays<-c(31,28,31,30,31,30,31,31,30,31,30,31)
cmdays<-c(0,cumsum(mdays)[1:11])
permonth<-mdays*perday
maxlim<-10
day1<-1
dayspan<-365
daybegin<-1+(day1-1)*perday
dayend<-(day1+dayspan-1)*perday
datrange<-range(data$SWD[daybegin:dayend])[2]
t=seq(daybegin,dayend)
Q<-solarFlux(S0,phi,t/perday)
v<-rep(0,(length(t)))
swd<-rep(0,(length(t)))
for (k in day1:(day1+dayspan-1)){
rmean<-ifelse(k < 90 | k > 270,0.39,0.55)
rsd<-ifelse(k < 90 | k > 270,0.4,0.2)
#cat(k," ")
dbegin<-1+(k-1)*perday
dend<-k*perday
for(minute in dbegin:srss$sunrise[k]){
swd[minute-daybegin]=0
}
for(minute in srss$sunset[k]:dend){
swd[minute-daybegin]=0
}
v[srss$sunrise[k]+1]<-90#round((nrow(cpm)-1)*runif(1),0)+1#ifelse(k==1,round((nrow(cpm)-1)*runif(1),0)+1,v[srss$sunset[k-1]-1])
mincount=0
maxcount=0
for (i in (srss$sunrise[k]+2):srss$sunset[k]){
colIndex=min(1,max(0.1,rnorm(1,0,rsd)+rmean))
j=1
while (cpm[v[i-1],j] < colIndex){
j=j+1
}
v[i]=j
#         if (j==1 && v[i-1]==1) mincount=mincount+1
#         if (j==max(bins) && v[i-1]==max(bins) ) maxcount =maxcount+1
#         if (mincount == maxlim | maxcount == maxlim){
#             print(paste("maxlim reached: min= ",mincount," max= ",maxcount))
#             v[i]=max(bins)/2
#             mincount=0
#             maxcount=0
#         }
#v[i]=min(j,nrow(cpm))
#v[i]=max(1,j)
Qnow<-solarFlux(S0,phi,i/perday)
swd[i-daybegin]<-(v[i]/max(bins))*Qnow #*datrange)
}
#cat(k,":",round(v[i-1],0),j," ")
cat (k,",",bins[v[i]],": ",sep="")
}
sum(swd)/sum(Q)
sum(swd)/sum(data$SWD[daybegin:dayend])
sum(data$SWD[daybegin:dayend])/sum(Q)
months<-dayend/(30*perday)
simtotal=0
meastotal=0
for (i in 1:months) {
monthbegin<-cmdays[i]*perday+1
monthend<-(cmdays[i]+mdays[i])*perday
simtotal<-simtotal+sum(swd[monthbegin:monthend])
meastotal<-meastotal+sum(data$SWD[monthbegin:monthend])
monthratio<-sum(swd[monthbegin:monthend])/sum(data$SWD[monthbegin:monthend])
print(paste(i,": ",monthbegin,monthend,round(monthratio,2),round(simtotal/meastotal,2)))
}
sum(data$SWD[daybegin:dayend])/(60*1000)
sum(swd)/(60*1000)
summary(swd[swd>0])
hist(swd[swd>0],breaks=50)
summary(data$SWD[data$SWD>0])
hist(data$SWD[data$SWD>0],breaks=50)
# plot(t/1440,Cam2001n$SWD[daybegin:dayend],type="l",ylim=c(0,1500))
# lines(t/1440,swd,type="l",col="blue")
# lines(t/1440,Q,type="l",col="red")
#day<-183
for (day in seq(day1,(day1+dayspan-1),by=3)){
start<-srss[day,2]
end<-srss[day,3]
ymax<-max(max(Q[start:end]),max(data$SWD[start:end]))
plot(t[start:end]/perday,data$SWD[start:end],type="l",ylim=c(0,ymax))
lines(t[start:end]/perday,swd[start:end],type="l",col="blue")
lines(t[start:end]/perday,Q[start:end],type="l",col="red")
}
library(dplyr)
newdata<-as.data.frame(cbind(t,swd))
names(newdata)<-c("minutes","swd")
write.csv(newdata,"../data/synthetic/Cam002_1min.csv")
t10<-10*(t %/% 10)
newdata<-as.data.frame(cbind(t10,swd))
names(newdata)<-c("minutes","swd")
new10<-newdata %>% group_by(minutes) %>% summarise_each(funs(mean))
write.csv(new10,"../data/synthetic/Cam002_10min.csv")
# clean up
rm(swd,t,t10,v,newdata,new10)
