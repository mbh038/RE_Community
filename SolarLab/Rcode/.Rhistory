str(tab)
ranges(tab)
ranges(tab)[1:51]
summary(tab)
width(tab)
?summarizeOverlaps
parm
queryHits(tab)
RNAseqData.HNRNPC.bam.chr14_BAMFILES
parm
summary(parm)
ranges(parm)
tab
tab[,1]
colData(tab)
tab$ERR127306
tab[,2]
sum(tab[,2])
tab
str(tab)
score(tab)
seqnames(tab)
assays(tab)
assays(tab)[[1]]
assays(tab)[[1]][1,]
regions=1:51
regions
regions=1:51
zeros<-sapply(regions, function (x) {
sum(assays(tab)[[1]][x,])==0
})
zeros
sum(zeros)
sum(apply(assay(tab),1,function(x)all(x==0)))
regions=1:51
zeros<-sapply(regions, function (x) {
sum(assays(tab)[[1]][x,])==0
})
sum(zeros)
mm = ScanBamParam(which=rowRanges(tab)[5], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk = scanBam(bf[1], param=mm)
kk
class(kk)
?scanBam
mm
bf
tab[5]
rowRanges(tab)[5]
rowRanges(tab)[51]
rowRanges(tab)[52]
rowRanges(tab)[5]
mm
sum(apply(assay(tab)[5],1,function(x)sum(x)))
assay(tab[5])
kk
str(kk)
mean(kk$mapq)
kk$mapq
kk[[1]]$mapq
sum(assay(tab[5])
)
mean(kk[[1]]$mapq)
mm = ScanBamParam(which=rowRanges(tab)[30], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk30 = scanBam(bf[1], param=mm)
sum(assay(tab[30]))
mean(kk30[[1]]$mapq)
assay(tab[30])
kk30[[1]]$mapq
kk30[1]$mapq
mm = ScanBamParam(which=rowRanges(tab)[5], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk = scanBam(bf[1], param=mm)
sum(assay(tab[5]))
mean(kk[[1]]$mapq)
kk
kk30
kk30[1]
kk30[2]
kk30[1][1]
kk30[1][2]
kk30[2][1]
mm30 = ScanBamParam(which=rowRanges(tab)[30], what="mapq")
bf30 = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk30 = scanBam(bf30[1], param=mm30)
sum(assay(tab[30]))
mean(kk30[[1]]$mapq)
bf[1]
assays(tab[5])
assay(tab[5])
mm = ScanBamParam(which=rowRanges(tab)[5], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk = scanBam(bf[1], param=mm)
assay(tab[5])[1]
mean(kk[[1]]$mapq)
mm30 = ScanBamParam(which=rowRanges(tab)[30], what="mapq")
bf30 = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk30 = scanBam(bf30[1], param=mm30)
assay(tab[30])[1]
mean(kk30[[1]]$mapq)
kk30
kk
countBam(bf[1], param=mm)
countBam(bf[1], param=mm30)
library(geuvPack)
library(VariantAnnotation)
gtpath
biocLite("geuvPack")
library(geuvPack)
library(VariantAnnotation)
gtpath
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
```
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
library(ph525x)
b1 = benchOOM()
library(BiocInstaller)
biocLite("rhdf5")
library(ph525x)
b1 = benchOOM()
biocLite("bigmemory")
library(ph525x)
library(rhdf5)
library(bigmemory)
b1 = benchOOM()
b1
b1
b1$wr
b1$meth[which.min(b1$wr)]
h22 = scanVcfHeader(gtpath(22))
h22
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
mean( h5read("ex_hdf5file.h5", "x", index=list(1:4,1:4)))
h5read("ex_hdf5file.h5", "x", index=list(1:4,1:4))
h5read("ex_hdf5file.h5", "x")
h22 = scanVcfHeader(gtpath(22))
library(geuvPack)
library(VariantAnnotation)
gtpath
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
help.start()
library(ERBS)
juxta("chr22", main="ESRRA binding peaks on chr22")
juxta = function (chrname="chr22", ...)
{
require(ERBS)
data(HepG2)
data(GM12878)
require(ggbio)
require(GenomicRanges)  # "subset" is overused, need import detail
ap1 = autoplot(GenomicRanges::subset(HepG2, seqnames==chrname))
ap2 = autoplot(GenomicRanges::subset(GM12878, seqnames==chrname))
tracks(HepG2 = ap1, Bcell = ap2, ...)
# alternative code for Gviz below
#    require(Gviz)
#    ap1 = AnnotationTrack(GenomicRanges::subset(HepG2, seqnames==chrname))
#    names(ap1) = "HepG2"
#    ap2 = AnnotationTrack(GenomicRanges::subset(GM12878, seqnames==chrname))
#    names(ap2) = "B-cell"
#    ax = GenomeAxisTrack()
#    plotTracks(list(ax, ap1, ap2))
}
library(ERBS)
juxta("chr22", main="ESRRA binding peaks on chr22")
library(ERBS)
juxta("chr2", main="ESRRA binding peaks on chr2")
?package.skeleton
package.skeleton("erbsViz",list=juxta")
package.skeleton("erbsViz",list="juxta")
package.skeleton("erbsViz",list="juxta")
getwd()
package.skeleton("erbsViz",list="juxta")
install.packages("erbsViz", repos=NULL, type="source")
install.packages("erbsViz", repos=NULL, type="source")
library(erbsViz)
jdemo = juxta()
class(jdemo)
class(jdemo)
getSlots(getClass(class(jdemo)))
getSlots(getClass("Tracks"))
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0", "me <me@abc.com>",
"me <me@abc.com>", ".")
library(OrganismDbi)
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0", "me <me@abc.com>",
"me <me@abc.com>", ".")
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0", "me <me@abc.com>",
"me <me@abc.com>", ".")
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
gd
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
?makeOrganismPackage
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
library(org.Ce.eg.db)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
install.packages("Cen.ele6",
repos=NULL, type="source")
library(OrganismDbi)
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
join2 = c(org.Sc.sgd.db="ENTREZID",
TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
# gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
library(OrganismDbi)
gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
join2 = c(org.Sc.sgd.db="ENTREZID",
TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
if (!file.exists("Sac.cer3")) # don't do twice...
makeOrganismPackage(pkgname="Sac.cer3",  # simplify typing!
graphData=gd, organism="Saccharomyces cerevisiae",
version="1.0.0", maintainer="Student <ph525x@harvardx.edu>",
author="Student <ph525x@harvardx.edu>",
destDir=".",
license="Artistic-2.0")
gd
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
gd
library(OrganismDbi)
library(OrganismDbi)
gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
join2 = c(org.Sc.sgd.db="ENTREZID",
TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
if (!file.exists("Sac.cer3")) # don't do twice...
makeOrganismPackage(pkgname="Sac.cer3",  # simplify typing!
graphData=gd, organism="Saccharomyces cerevisiae",
version="1.0.0", maintainer="Student <ph525x@harvardx.edu>",
author="Student <ph525x@harvardx.edu>",
destDir=".",
license="Artistic-2.0")
library(org.Sc.sgd.db)
biocLite(org.Sc.sgd.db)
source("http://www.bioconductor.org/biocLite.R")
biocLite()
library(BiocInstaller)
biocLite("org.Ce.eg.db")
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
library(BiocInstaller)
biocLite("TxDb.Celegans.UCSC.ce6.ensGene")
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
install.packages("Cen.ele6",
repos=NULL, type="source")
library(Cen.ele6)
sum(seqlengths(Cen.ele6))
R CMD check erbsViz
setwd("C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode")
source('C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode/EnergySim.R', echo=TRUE)
summary(balance)
source('C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode/EnergySim.R', echo=TRUE)
source('C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode/EnergySim.R', echo=TRUE)
source('C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode/EnergySim.R', echo=TRUE)
plot(energyop$totalop[1:1000],type="l")
lines(energyop$balance[1:1000],col="red")
plot(energyop$totalop[25000:26000],type="l")
lines(energyop$balance[25000:26000],col="red")
plot(ddata$W[1:1000],type="l")
lines(energyop$balance[25000:26000],col="red")
plot(energyop$windop[1:1000],type="l")
lines(energyop$solarop[1:1000],col="red")
lines(ddata$W[1:1000],col="blue")
windMW<-10
windPower<-read.csv("../data/specs/windPowerCurve.csv")
solarMW<-60
# read in demand files
houses=18000
ddata<-read.csv("../data/profiles/EESP/domDem10.csv")
ddata$W<-houses*ddata$W/1e6
sipfilepathstem<-"../data/synthetic/CamBSRN_Solar10minSyn/CamSolarSyn10min"
wipfilepathstem<-"../data/synthetic/CallywithWind10minSyn/Cally"
sipfilepathtail<-".csv"
wipfilepathtail<-"_10min.csv"
# set up input file numbers
ipfilename<-function(file,ipfilepathstem,ipfilepathtail){
ipfilehandle<-as.character(file)
if (file < 10){
ipfilehandle<-paste0("00",ipfilehandle)
}
if (file >= 10 && file < 100){
ipfilehandle<-paste0("0",ipfilehandle)
}
ipfilename<-paste0(ipfilepathstem,ipfilehandle,ipfilepathtail)
}
wfile<-floor(100*runif(1)+1)
sfile<-floor(100*runif(1)+1)
print(paste("Solar file:",sfile,", Wind file: ",wfile,sep=" "))
wfilename<-ipfilename(wfile,wipfilepathstem,wipfilepathtail)
sfilename<-ipfilename(sfile,sipfilepathstem,sipfilepathtail)
wdata<-read.csv(wfilename)
sdata<-read.csv(sfilename)
data<-data.frame(wdata[,1],wdata[,2],sdata[,2])
data$day<-min(365,data$t %/% 144 +1)
names(data)<-c("t","w","s")
hist(data$w)
solarop<-numeric(length=length(data))
windop<-numeric(length=length(data))
for (i in 1:nrow(data)){
windop[i]<-ifelse(data$w[i]>3,windMW*windPower[which(windPower$v==data$w[i]),2],0)
solarop[i]<-solarMW*(data$s[i]/1000)
}
totalop<-windop+solarop
balance<-totalop-ddata$W
energyop<-data.frame(windop,solarop,totalop,balance)
plot(energyop$windop[1:1000],type="l")
lines(energyop$solarop[1:1000],col="red")
lines(ddata$W[1:1000],col="blue")
plot(ddata$W[1:1000],type="l")
lines(energyop$solarop[1:1000],col="red")
lines(energyop$windop[1:1000],col="blue")
plot(ddata$W[1:1000],type="l",xlim=c(8,12))
lines(energyop$solarop[1:1000],col="red")
lines(energyop$windop[1:1000],col="blue")
plot(ddata$W[1:1000],type="l",ylim=c(8,12))
lines(energyop$solarop[1:1000],col="red")
lines(energyop$windop[1:1000],col="blue")
plot(ddata$W[1:1000],type="l",ylim=c(0,12))
lines(energyop$solarop[1:1000],col="red")
lines(energyop$windop[1:1000],col="blue")
plot(ddata$W[1:1000],type="l",ylim=c(-12,12))
lines(energyop$solarop[1:1000],col="red")
lines(energyop$windop[1:1000],col="blue")
lines(energyop$balance[1:1000],col="green")
source('C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode/EnergySim.R', echo=TRUE)
energyop<-data.frame(windop,solarop,totalop,ddata$Wbalance)
energyop<-data.frame(windop,solarop,totalop,ddata$W,balance)
summary(energyop)
summary(energyop)
powerop<-data.frame(windop,solarop,totalop,ddata$W,balance)
summary(powerop)
source('C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode/EnergySim.R', echo=TRUE)
plot(ddata$W[1:1000],type="l",ylim=c(-12,12))
lines(powerop$solarop[1:1000],col="red")
lines(powerop$windop[1:1000],col="blue")
lines(powerop$balance[1:1000],col="green")
head(powerop)
head(wdata)
library(rafalib)
mypar=(2,1)
plot(ddata$W[1:1000],type="l",ylim=c(-12,12))
lines(powerop$solarop[1:1000],col="red")
lines(powerop$windop[1:1000],col="blue")
lines(powerop$balance[1:1000],col="green")
plot(ddata$W[25000:26000],type="l",ylim=c(-12,12))
lines(powerop$solarop[25000:26000],col="red")
lines(powerop$windop[25000:26000],col="blue")
lines(powerop$balance[25000:26000],col="green")
library(rafalib)
mypar=c(2,1)
plot(ddata$W[1:1000],type="l",ylim=c(-12,12))
lines(powerop$solarop[1:1000],col="red")
lines(powerop$windop[1:1000],col="blue")
lines(powerop$balance[1:1000],col="green")
plot(ddata$W[25000:26000],type="l",ylim=c(-12,12))
lines(powerop$solarop[25000:26000],col="red")
lines(powerop$windop[25000:26000],col="blue")
lines(powerop$balance[25000:26000],col="green")
?rafalib
library(rafalib)
mypar=c(2,1)
plot(ddata$W[1:1000],type="l",ylim=c(-12,12))
lines(powerop$solarop[1:1000],col="red")
lines(powerop$windop[1:1000],col="blue")
lines(powerop$balance[1:1000],col="green")
plot(ddata$W[25000:26000],type="l",ylim=c(-12,12))
lines(powerop$solarop[25000:26000],col="red")
lines(powerop$windop[25000:26000],col="blue")
lines(powerop$balance[25000:26000],col="green")
?mypar
library(rafalib)
mypar(2,1)
plot(ddata$W[1:1000],type="l",ylim=c(-12,12))
lines(powerop$solarop[1:1000],col="red")
lines(powerop$windop[1:1000],col="blue")
lines(powerop$balance[1:1000],col="green")
plot(ddata$W[25000:26000],type="l",ylim=c(-12,12))
lines(powerop$solarop[25000:26000],col="red")
lines(powerop$windop[25000:26000],col="blue")
lines(powerop$balance[25000:26000],col="green")
# read in demand files
houses=18000
ddata<-read.csv("../data/profiles/EESP/domDem10.csv")
demand<-numeric()
demand<-houses*ddata$W/1e6
library(rafalib)
mypar(2,1)
days<-seq(1,1000)/144
plot(days,ddata$W[1:1000],type="l",ylim=c(-12,12))
days
plot(days,powerop$demand[1:1000],type="l",ylim=c(-12,12))
library(rafalib)
mypar(2,1)
days<-seq(1,1000)/144
plot(days,powerop$demand[1:1000],type="l",ylim=c(-12,12))
summary(powerop)
powerop<-data.frame(windop,solarop,totalop,demand,balance)
summary(powerop)
library(rafalib)
mypar(2,1)
days<-seq(1,1000)/144
plot(days,powerop$demand[1:1000],type="l",ylim=c(-12,12))
lines(powerop$solarop[1:1000],col="red")
library(rafalib)
mypar(2,1)
days<-seq(1,1000)/144
plot(days,powerop$demand[1:1000],type="l",ylim=c(-12,12))
lines(days,powerop$solarop[1:1000],col="red")
lines(days,powerop$windop[1:1000],col="blue")
lines(days,powerop$balance[1:1000],col="green")
library(rafalib)
mypar(2,1)
days<-seq(1,1000)/144
plot(days,powerop$demand[1:1000],type="l",ylim=c(-12,12))
lines(days,powerop$solarop[1:1000],col="red")
lines(days,powerop$windop[1:1000],col="blue")
lines(days,powerop$balance[1:1000],col="green")
plot(days,demand[25000:26000],type="l",ylim=c(-12,12))
lines(days,powerop$solarop[25000:26000],col="red")
lines(days,powerop$windop[25000:26000],col="blue")
lines(days,powerop$balance[25000:26000],col="green")
plot(days,powerop$demand[25000:26000],type="l",ylim=c(-12,12))
plot(days,powerop$demand[25001:26000],type="l",ylim=c(-12,12))
library(rafalib)
mypar(2,1)
days<-seq(1,1000)/144
plot(days,powerop$demand[1:1000],type="l",ylim=c(-12,12))
lines(days,powerop$solarop[1:1000],col="red")
lines(days,powerop$windop[1:1000],col="blue")
lines(days,powerop$balance[1:1000],col="green")
plot(days,powerop$demand[25001:26000],type="l",ylim=c(-12,12))
lines(days,powerop$solarop[25001:26000],col="red")
lines(days,powerop$windop[25001:26000],col="blue")
lines(days,powerop$balance[25001:26000],col="green")
library(rafalib)
mypar(2,1)
days<-seq(1,1000)/144
plot(days,powerop$demand[1:1000],type="l",
ylim=c(-12,12),
xlab="Winter days",
ylab="Power (MW)"
)
lines(days,powerop$solarop[1:1000],col="red")
lines(days,powerop$windop[1:1000],col="blue")
lines(days,powerop$balance[1:1000],col="green")
plot(days,powerop$demand[25001:26000],type="l",
ylim=c(-12,12),
xlab="Summer days",
ylab="Power (MW)"
)
lines(days,powerop$solarop[25001:26000],col="red")
lines(days,powerop$windop[25001:26000],col="blue")
lines(days,powerop$balance[25001:26000],col="green")
hist(ddata$W)
hist(balance)
source('C:/Users/Mike/Rspace/RE_Community/SolarLab/Rcode/EnergySim.R', echo=TRUE)
hist(powerop$demand)
hist(powerop$balance)
