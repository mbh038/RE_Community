set.seed(2)
SVMmodel <- svm(model(8)[[1]], data=train,cost=64,gamma=0.1,epsilon=0)
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
setwd("H:/Rspace/RE_Community")
## Callywith wind analysis
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
library(plotrix)
## read in data
dat.wide<-read.csv("callywith3year.csv",stringsAsFactors=FALSE)
# convert time to POSIXct
dat.wide$Timestamp<-dmy_hm(dat.wide$Timestamp)
#tidy the data
cw<-gather(dat.wide,height,V,V46:V20,-Dir)
rm(dat.wide)
cw46<-filter(cw,height=="V46")
cw32<-filter(cw,height=="V32")
cw20<-filter(cw,height=="V20")
## TPM 20
reference<-cw46
reference$bin<-floor(reference$V)+1
table(reference$bin)
sum(table(reference$bin))
maxBin=max(reference$bin)+1
tpm<-matrix(0, nrow = maxBin, ncol =maxBin)
spm<-numeric(maxBin)
cpm<-matrix(0, nrow = maxBin, ncol =maxBin)
for (i in 1:nrow(reference)){
tpm[reference$bin[i],reference$bin[i+1]] <-tpm[reference$bin[i],reference$bin[i+1]] + 1
}
tpm[1,]
print(tpm)
sum(tpm[1,])
for (i in 1 :nrow(tpm)){
spm[i]=sum(tpm[i,])
}
spm
sum(spm)
for (i in 1 :nrow(tpm)){
tpm[i,]=tpm[i,]/sum(tpm[i,])
}
for (i in 1 : nrow(tpm)){
for (j in 1 :ncol(tpm)){
cpm[i,j]=sum(tpm[i,1:j])
}
}
print (cpm)
v=numeric(nrow(reference))
v[1]=round((maxBin)*runif(1),0)+1
for (i in 2:nrow(reference)){
colIndex=runif(1)
j=1
while (cpm[round(v[i-1],0),j] < colIndex){
j=j+1
}
v[i]=j
}
cpm
summary(v)
summary(reference$bin)
v=v-1+runif(nrow(reference))
mean(v)-mean(reference$V)
sd(v)-sd(reference$V)
summary(v)
summary(reference$V)
library(MASS)
vFit<-fitdistr(v+.01, 'weibull')
print (vFit)
refFit<-fitdistr(reference$V+.01, 'weibull')
print(refFit)
hist(v,xlim=c(0,20),prob=TRUE)
d = dweibull(seq(0,20,.2),vFit$estimate[1],vFit$estimate[2])
points(seq(0,20,.2),d,type='l',col=2)
com<-data.frame(c("Time","V","P","D"))
2^9
2^12
# perform a grid search
tuneResult <- tune(svm, model(8)[[1]],  data = train,
ranges = list(epsilon = seq(0,1,0.1), gamma = 2^(2:12),epsilon=0)
)
print(tuneResult)
# best performance: MSE = 8.371412, RMSE = 2.89 epsilon 1e-04 cost 4
# Draw the tuning graph
plot(tuneResult)
# perform a grid search
tuneResult <- tune(svm, model(8)[[1]],  data = train,
ranges = list(epsilon = seq(0,1,0.1), gamma = 2^(2:12),epsilon=0)
)
print(tuneResult)
# best performance: MSE = 8.371412, RMSE = 2.89 epsilon 1e-04 cost 4
# Draw the tuning graph
plot(tuneResult)
# perform a grid search
tuneResult <- tune(svm, model(8)[[1]],  data = train,
ranges = list(epsilon = 0, gamma = 2^(2:12),cost = 2^(2:9))
)
print(tuneResult)
# best performance: MSE = 8.371412, RMSE = 2.89 epsilon 1e-04 cost 4
# Draw the tuning graph
plot(tuneResult)
# perform a grid search
tuneResult <- tune(svm, model(8)[[1]],  data = train,
ranges = list(gamma = 2^(2:12),cost = 2^(2:9))
)
print(tuneResult)
# best performance: MSE = 8.371412, RMSE = 2.89 epsilon 1e-04 cost 4
# Draw the tuning graph
plot(tuneResult)
set.seed(2)
SVMmodel <- svm(model(8)[[1]], data=train,cost=8,gamma=4,epsilon=0.0001)
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
set.seed(2)
SVMmodel <- svm(model(8)[[1]], data=train,cost=8,gamma=4,epsilon=0.1)
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
SVMmodel <- svm(model(8)[[1]], data=train,cost=8,gamma=4,epsilon=0)
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
set.seed(2)
SVMmodel <- svm(model(8)[[1]], data=train,cost=2000,gamma=4,epsilon=0)
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
set.seed(2)
SVMmodel <- svm(model(8)[[1]], data=train,cost=8,gamma=4,epsilon=0.0001)
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
set.seed(2)
SVMmodel <- svm(model(8)[[1]], data=train,cost=8,gamma=200,epsilon=0.0001)
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
# perform a grid search
tuneResult <- tune(svm, model(8)[[1]],  data = train,
ranges = list(gamma = 2^(2:9),cost = 2^(2:9))
)
print(tuneResult)
# best performance: MSE = 8.371412, RMSE = 2.89 epsilon 1e-04 cost 4
# Draw the tuning graph
plot(tuneResult)
# perform a grid search
tuneResult <- tune(svm, model(8)[[1]],  data = train,
ranges = list(gamma = seq(1,10),cost = seq(1,10))
)
print(tuneResult)
# best performance: MSE = 8.371412, RMSE = 2.89 epsilon 1e-04 cost 4
# Draw the tuning graph
plot(tuneResult)
# perform a grid search
tuneResult <- tune(svm, model(8)[[1]],  data = train,
ranges = list(gamma = seq(0,1,.1),cost = seq(0,1,.1))
)
print(tuneResult)
plot(tuneResult)
tunedModel <- tuneResult$best.model
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
# perform a grid search
tuneResult <- tune(svm, model(8)[[1]],  data = train,
ranges = list(gamma = seq(0.1,1,.1),cost = seq(0.1,1,.1))
)
print(tuneResult)
plot(tuneResult)
tunedModel <- tuneResult$best.model
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
tuneResult <- tune(svm, model(8)[[1]],  data = train,
ranges = list(gamma = seq(0.1,1,.1),cost=10,epsilon=.0001)
)
print(tuneResult)
plot(tuneResult)
tunedModel <- tuneResult$best.model
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
tuneResult
tunedModel <- tuneResult$best.model
svm.pred = predict(SVMmodel, newdata = test)
acc<-sum(svm.pred==test$Survived)/nrow(test)
acc
2*2
train
head(train)
tail(train,20)
?tail
rm(list=ls())
x=rnorm(10)
x
?rnorm
y<-rnorm(10)
y
y+1
plot(x,y)
plot(x,y,col="red")
plot(x,y,col="red",pch=19)
dat=cbind(x,y)
dat
getwd()
save.csv("data.csv",dat)
write.csv("data.csv",dat)
?write.csv
write.csv(dat,file="data.csv")
x
rm(x)
rm(y)
rm(dat)
x
read.csv("data.csv")
setwd("H:/Rspace/RE_Community")
## Callywith wind analysis
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
library(plotrix)
## read in data
dat.wide<-read.csv("callywith3year.csv",stringsAsFactors=FALSE)
install.packages("dplyr")
## read in data
dat.wide<-read.csv("callywith3year.csv",stringsAsFactors=FALSE)
str(dat.wide)
summary(dat.wide)
head(dat.wide)
hist(dat.wide$V46)
?hist
plot(dat.wide$V46)
plot(dat.wide$V46[1:1000])
plot(dat.wide$V46[1:1000],type="l")
dat.wide$Timestamp<-dmy_hm(dat.wide$Timestamp)
str(dat.wide)
cw<-gather(dat.wide,height,V,V46:V20,-Dir)
str(cw)
table(cw$height)
cw46<-filter(cw,height=="V46")
cw32<-filter(cw,height=="V32")
cw20<-filter(cw,height=="V20")
str(cw20)
reference$bin<-floor(reference$V)+1
table(reference$bin)
sum(table(reference$bin))
maxBin=max(reference$bin)+1
tpm<-matrix(0, nrow = maxBin, ncol =maxBin)
spm<-numeric(maxBin)
cpm<-matrix(0, nrow = maxBin, ncol =maxBin)
for (i in 1:nrow(reference)){
tpm[reference$bin[i],reference$bin[i+1]] <-tpm[reference$bin[i],reference$bin[i+1]] + 1
}
tpm[1,]
print(tpm)
reference<-cw46
reference$bin<-floor(reference$V)+1
table(reference$bin)
sum(table(reference$bin))
maxBin=max(reference$bin)+1
tpm<-matrix(0, nrow = maxBin, ncol =maxBin)
spm<-numeric(maxBin)
cpm<-matrix(0, nrow = maxBin, ncol =maxBin)
for (i in 1:nrow(reference)){
tpm[reference$bin[i],reference$bin[i+1]] <-tpm[reference$bin[i],reference$bin[i+1]] + 1
}
tpm[1,]
print(tpm)
reference<-cw46
reference<-cw46
str(reference)
reference$bin<-floor(reference$V)+1
str(reference)
table(cw46$bin)
table(reference$bin)
head(reference,20)
floor(6.7)
floor(0.4)
table(reference$bin)
sum(table(reference$bin))
sum(1,2,3)
maxBin=max(reference$bin)+1
maxBin
,
tpm<-matrix(0, nrow = maxBin, ncol =maxBin)
tpm
spm<-numeric(maxBin)
spm
cpm<-matrix(0, nrow = maxBin, ncol =maxBin)
for (i in 1:nrow(reference)){
tpm[reference$bin[i],reference$bin[i+1]] <-tpm[reference$bin[i],reference$bin[i+1]] + 1
}
tpm
tpm[1,]
tpm[,1]
print(tpm)
sum(tpm[1,])
for (i in 1 :nrow(tpm)){
spm[i]=sum(tpm[i,])
}
spm
sum(spm)
for (i in 1 :nrow(tpm)){
tpm[i,]=tpm[i,]/sum(tpm[i,])
}
tpm
# calculate cumulative probabilities
for (i in 1 : nrow(tpm)){
for (j in 1 :ncol(tpm)){
cpm[i,j]=sum(tpm[i,1:j])
}
}
print (cpm)
v=numeric(nrow(reference))
str(v)
maxBin)*runif(1)
(maxBin)*runif(1)
(maxBin)*runif(1)
(maxBin)*runif(1)
round((maxBin)*runif(1),0)
round((maxBin)*runif(1),0)
round((maxBin)*runif(1),0)
round((maxBin)*runif(1),0)
round((maxBin)*runif(1),0)
round((maxBin)*runif(1),0)
round((maxBin)*runif(1),0)
round((maxBin)*runif(1),0)
for (i in 2:nrow(reference)){
colIndex=runif(1)
j=1
while (cpm[round(v[i-1],0),j] < colIndex){
j=j+1
}
v[i]=j
}
v=numeric(nrow(reference))
#randomly choose first wind speed
v[1]=round((maxBin)*runif(1),0)+1
for (i in 2:nrow(reference)){
colIndex=runif(1)
j=1
while (cpm[round(v[i-1],0),j] < colIndex){
j=j+1
}
v[i]=j
}
str(v)
table(v)
hist(v)
summary(v)
summary(reference$bin)
v=v-1+runif(nrow(reference))
mean(v)-mean(reference$V)
sd(v)-sd(reference$V)
summary(v)
summary(reference$V)
library(MASS)
vFit<-fitdistr(v+.01, 'weibull')
print (vFit)
refFit<-fitdistr(reference$V+.01, 'weibull')
print(refFit)
hist(v,xlim=c(0,20),prob=TRUE)
d = dweibull(seq(0,20,.2),vFit$estimate[1],vFit$estimate[2])
points(seq(0,20,.2),d,type='l',col=2)
plot(v{1:1000})
plot(v[1:1000])
plot(v[1:1000],type="l")
lines(reference[1:1000],type="l"col="red")
lines(reference[1:1000],type="l",col="red")
lines(reference$V[1:1000],type="l",col="red")
cpm
summary(v)
summary(reference$bin)
v=v-1+runif(nrow(reference))
mean(v)-mean(reference$V)
sd(v)-sd(reference$V)
summary(v)
summary(reference$V)
library(MASS)
vFit<-fitdistr(v+.01, 'weibull')
print (vFit)
refFit<-fitdistr(reference$V+.01, 'weibull')
print(refFit)
hist(v,xlim=c(0,20),prob=TRUE)
d = dweibull(seq(0,20,.2),vFit$estimate[1],vFit$estimate[2])
points(seq(0,20,.2),d,type='l',col=2)
plot(v[1:1000],type="l")
lines(reference$V[1:1000],type="l",col="red"
)
v=v-1+runif(nrow(reference))
mean(v)-mean(reference$V)
sd(v)-sd(reference$V)
summary(v)
summary(reference$V)
library(MASS)
vFit<-fitdistr(v+.01, 'weibull')
print (vFit)
refFit<-fitdistr(reference$V+.01, 'weibull')
print(refFit)
hist(v,xlim=c(0,20),prob=TRUE)
d = dweibull(seq(0,20,.2),vFit$estimate[1],vFit$estimate[2])
points(seq(0,20,.2),d,type='l',col=2)
plot(v[1:1000],type="l")
lines(reference$V[1:1000],type="l",col="red")
v=v-1+runif(nrow(reference))
mean(v)-mean(reference$V)
sd(v)-sd(reference$V)
summary(v)
summary(reference$V)
library(MASS)
vFit<-fitdistr(v+.01, 'weibull')
print (vFit)
refFit<-fitdistr(reference$V+.01, 'weibull')
print(refFit)
hist(v,xlim=c(0,20),prob=TRUE)
d = dweibull(seq(0,20,.2),vFit$estimate[1],vFit$estimate[2])
points(seq(0,20,.2),d,type='l',col=2)
plot(v[1:1000],type="l")
lines(reference$V[1:1000],type="l",col="red")
v=v-1+runif(nrow(reference))
mean(v)-mean(reference$V)
sd(v)-sd(reference$V)
summary(v)
summary(reference$V)
library(MASS)
vFit<-fitdistr(v+.01, 'weibull')
print (vFit)
refFit<-fitdistr(reference$V+.01, 'weibull')
print(refFit)
hist(v,xlim=c(0,20),prob=TRUE)
d = dweibull(seq(0,20,.2),vFit$estimate[1],vFit$estimate[2])
points(seq(0,20,.2),d,type='l',col=2)
plot(v[1:1000],type="l")
lines(reference$V[1:1000],type="l",col="red")
v=v-1+runif(nrow(reference))
mean(v)-mean(reference$V)
sd(v)-sd(reference$V)
summary(v)
summary(reference$V)
library(MASS)
vFit<-fitdistr(v+.01, 'weibull')
print (vFit)
refFit<-fitdistr(reference$V+.01, 'weibull')
print(refFit)
hist(v,xlim=c(0,20),prob=TRUE)
d = dweibull(seq(0,20,.2),vFit$estimate[1],vFit$estimate[2])
points(seq(0,20,.2),d,type='l',col=2)
plot(v[1:1000],type="l")
lines(reference$V[1:1000],type="l",col="red")
v=numeric(nrow(reference))
#randomly choose first wind speed
v[1]=round((maxBin)*runif(1),0)+1
for (i in 2:nrow(reference)){
colIndex=runif(1)
j=1
while (cpm[round(v[i-1],0),j] < colIndex){
j=j+1
}
v[i]=j
}
cpm
summary(v)
summary(reference$bin)
v=v-1+runif(nrow(reference))
mean(v)-mean(reference$V)
sd(v)-sd(reference$V)
summary(v)
summary(reference$V)
library(MASS)
vFit<-fitdistr(v+.01, 'weibull')
print (vFit)
refFit<-fitdistr(reference$V+.01, 'weibull')
print(refFit)
hist(v,xlim=c(0,20),prob=TRUE)
d = dweibull(seq(0,20,.2),vFit$estimate[1],vFit$estimate[2])
points(seq(0,20,.2),d,type='l',col=2)
plot(v[1:1000],type="l")
lines(reference$V[1:1000],type="l",col="red")
v=numeric(nrow(reference))
#randomly choose first wind speed
v[1]=round((maxBin)*runif(1),0)+1
for (i in 2:nrow(reference)){
colIndex=runif(1)
j=1
while (cpm[round(v[i-1],0),j] < colIndex){
j=j+1
}
v[i]=j
}
cpm
summary(v)
summary(reference$bin)
v=v-1+runif(nrow(reference))
mean(v)-mean(reference$V)
sd(v)-sd(reference$V)
summary(v)
summary(reference$V)
library(MASS)
vFit<-fitdistr(v+.01, 'weibull')
print (vFit)
refFit<-fitdistr(reference$V+.01, 'weibull')
print(refFit)
hist(v,xlim=c(0,20),prob=TRUE)
d = dweibull(seq(0,20,.2),vFit$estimate[1],vFit$estimate[2])
points(seq(0,20,.2),d,type='l',col=2)
plot(v[1:1000],type="l")
lines(reference$V[1:1000],type="l",col="red")
